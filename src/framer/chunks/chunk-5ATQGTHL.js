// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project 3e9f5e2dfe1fa837 "Unframer CMS Test", do not edit manually */
// /:https://framerusercontent.com/modules/1o5Bk6b6qvbR58A6b2Ej/0pQTfUARQx5sQl0x4j9H/Superfields.js
import { jsx as _jsx3, jsxs as _jsxs2, Fragment as _Fragment } from "react/jsx-runtime";
import {
  addPropertyControls,
  ControlType as ControlType2,
  RenderTarget,
  ResolveLinks,
  useQueryData,
  PathVariablesContext as PathVariablesContext2
} from "unframer";
import { cloneElement as cloneElement2, useEffect as useEffect3, useRef as useRef3, useMemo as useMemo3, memo } from "react";

// /:https://framerusercontent.com/modules/FZjYlw33eNo8pxLbSFLX/ICC3kQB0rIHwdyJxFwc3/SuperfieldsShared.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ControlType, useRouter, PathVariablesContext } from "unframer";
import { motion } from "unframer";
import { cloneElement, useContext, useId } from "react";
var DEFAULT_SORTING_ID = "[{(DEFAULT_SORTING)}]";
var FAVOURITES_FILTER_ID = "[{(FAVOURITES)}]";
var DELIMITER = "_&%#|_";
var FieldType;
(function(FieldType2) {
  FieldType2["String"] = "string";
  FieldType2["Number"] = "number";
  FieldType2["Boolean"] = "boolean";
  FieldType2["Enum"] = "enum";
  FieldType2["Date"] = "date";
})(FieldType || (FieldType = {}));
var FilterFieldType;
(function(FilterFieldType2) {
  FilterFieldType2["Option"] = "option";
  FilterFieldType2["Toggle"] = "toggle";
  FilterFieldType2["Text"] = "text";
  FilterFieldType2["Reference"] = "reference";
  FilterFieldType2["MultiReference"] = "multiReference";
  FilterFieldType2["MultipleOptions"] = "multipleOptions";
})(FilterFieldType || (FilterFieldType = {}));
var FilterTextCondition;
(function(FilterTextCondition2) {
  FilterTextCondition2["Equals"] = "equals";
  FilterTextCondition2["Contains"] = "contains";
})(FilterTextCondition || (FilterTextCondition = {}));
var useInstanceId = () => {
  const id = useId();
  const cleanId = id.replace(/:/g, "");
  const instanceId = `superfields-${cleanId}`;
  return instanceId;
};
var superfieldsId = ({ hidden = void 0 } = {}) => ({ superfieldsId: { type: ControlType.Number, defaultValue: 0, min: 0, step: 1, displayStepper: true, title: "CMS ID", description: "Match with ID on Superfields component", hidden } });
function Button({ props, onClick, onMouseEnter = null }) {
  var _props_font, _props_style;
  if (props.appearance == "custom") {
    var _props_customLayer, _props_style1, _props_style2;
    let layer = (_props_customLayer = props.customLayer) === null || _props_customLayer === void 0 ? void 0 : _props_customLayer[0];
    const width = (_props_style1 = props.style) === null || _props_style1 === void 0 ? void 0 : _props_style1.width;
    const height = (_props_style2 = props.style) === null || _props_style2 === void 0 ? void 0 : _props_style2.height;
    if (layer && props.style && (width || height)) {
      layer = /* @__PURE__ */ cloneElement(layer, { style: { ...layer.props.style, ...width && { width }, ...height && { height } } });
    }
    return /* @__PURE__ */ _jsx("div", { "data-superfields": true, style: { display: "contents" }, onClick, children: layer });
  }
  return /* @__PURE__ */ _jsxs("div", { "data-superfields": true, onClick, style: { position: "relative", display: "flex", justifyContent: ((_props_font = props.font) === null || _props_font === void 0 ? void 0 : _props_font.textAlign) || "center", alignItems: "center", ...createBackground(props.fill), color: props.fontColor, padding: props.paddingIsMixed ? `${props.paddingTop}px ${props.paddingRight}px ${props.paddingBottom}px ${props.paddingLeft}px` : `${props.padding}px`, borderRadius: props.radiusIsMixed ? `${props.radiusTopLeft}px ${props.radiusTopRight}px ${props.radiusBottomRight}px ${props.radiusBottomLeft}px` : `${props.radius}px`, userSelect: "none", cursor: "pointer", flex: props.sizing == "fill" ? "1 0 0" : void 0, textWrap: ((_props_style = props.style) === null || _props_style === void 0 ? void 0 : _props_style.width) == "100%" ? void 0 : "nowrap", boxShadow: props.shadows, ...props.font, ...props.style }, children: [props.text, /* @__PURE__ */ _jsx(Border, { ...props.border })] });
}
Button.displayName = "Superfields/Button";
var borderPropertyControl = (props = {}) => ({ type: ControlType.Object, optional: true, controls: { color: { type: ControlType.Color, defaultValue: "#222" }, width: { type: ControlType.FusedNumber, defaultValue: 1, toggleKey: "widthIsMixed", toggleTitles: ["All", "Individual"], valueKeys: ["widthTop", "widthRight", "widthBottom", "widthLeft"], valueLabels: ["T", "R", "B", "L"], min: 0 }, style: { type: ControlType.Enum, defaultValue: "solid", options: ["solid", "dashed", "dotted", "double"], optionTitles: ["Solid", "Dashed", "Dotted", "Double"] } }, ...props });
function Border({ width, widthIsMixed, widthTop, widthRight, widthBottom, widthLeft, style, color, transition, animate, radius = "inherit" }) {
  return /* @__PURE__ */ _jsx(motion.div, { animate: { borderColor: color, ...animate }, style: { position: "absolute", inset: 0, borderWidth: widthIsMixed ? `${widthTop}px ${widthRight}px ${widthBottom}px ${widthLeft}px` : `${width}px`, borderStyle: style, borderRadius: radius, pointerEvents: "none" }, initial: false, transition });
}
Border.displayName = "Superfields/Border";
function Message({ title, subtitle }) {
  return /* @__PURE__ */ _jsxs("div", { style: { display: "flex", width: "100%", height: "100%", placeContent: "center", placeItems: "center", flexDirection: "column", gap: 16, backgroundColor: "rgba(136, 85, 255, 0.1)", borderRadius: 6, border: "1px dashed rgb(136, 85, 255)", color: "rgb(136, 85, 255)", fontSize: 16, padding: 20, minHeight: 200, textWrap: "balance" }, children: [/* @__PURE__ */ _jsx("p", { style: { margin: 0, fontWeight: 600, textAlign: "center" }, children: title }), /* @__PURE__ */ _jsx("p", { style: { margin: 0, opacity: 0.7, lineHeight: 1.5, textAlign: "center" }, children: subtitle })] });
}
Message.displayName = "Superfields/Message";
function createBackground(fill, on = null) {
  if (fill) {
    let { color, colorA, colorB } = fill;
    if (typeof on == "boolean") {
      if (on) {
        color = fill.colorOn;
        colorA = fill.colorAOn;
        colorB = fill.colorBOn;
      } else {
        color = fill.colorOff;
        colorA = fill.colorAOff;
        colorB = fill.colorBOff;
      }
    }
    if (fill.type == "color") {
      return { backgroundColor: color, backgroundImage: "none" };
    } else {
      return { backgroundColor: "none", backgroundImage: `linear-gradient(${fill.gradientAngle}deg, ${colorB}, ${colorA})` };
    }
  }
  return {};
}
function fillProp({ color = "#FFF", gradientColorA = "#FFF", gradientColorB = "#BDBDBD", noDefault = false, ...props }) {
  return { type: ControlType.Object, optional: true, defaultValue: noDefault ? void 0 : { type: "color", color, colorA: gradientColorA, colorB: gradientColorB, gradientAngle: 0 }, controls: { type: { type: ControlType.Enum, defaultValue: "color", options: ["color", "gradient"], optionTitles: ["Color", "Gradient"], displaySegmentedControl: true }, color: { type: ControlType.Color, defaultValue: color, hidden: (props2) => props2.type != "color" }, colorA: { type: ControlType.Color, defaultValue: gradientColorA, title: "Colors", hidden: (props2) => props2.type != "gradient" }, colorB: { type: ControlType.Color, defaultValue: gradientColorB, title: " ", hidden: (props2) => props2.type != "gradient" }, gradientAngle: { type: ControlType.Number, defaultValue: 0, title: "Angle", step: 1, min: 0, max: 360, unit: "\xB0", hidden: (props2) => props2.type != "gradient" } }, ...props };
}
function fillPropOnOff({ colorOn = "#FFF", colorAOn = "#FFF", colorBOn = "#000", colorOff = "#FFF", colorAOff = "#FFF", colorBOff = "#000", noDefault = false, ...props }) {
  return { type: ControlType.Object, optional: true, defaultValue: noDefault ? void 0 : { type: "color", colorOn, colorAOn, colorBOn, colorOff, colorAOff, colorBOff, gradientAngle: 0 }, controls: { type: { type: ControlType.Enum, defaultValue: "color", options: ["color", "gradient"], optionTitles: ["Color", "Gradient"], displaySegmentedControl: true }, colorOn: { type: ControlType.Color, defaultValue: colorOn, hidden: (props2) => props2.type != "color" }, colorAOn: { type: ControlType.Color, defaultValue: colorAOn, title: "Colors On", hidden: (props2) => props2.type != "gradient" }, colorBOn: { type: ControlType.Color, defaultValue: colorBOn, title: " ", hidden: (props2) => props2.type != "gradient" }, colorOff: { type: ControlType.Color, defaultValue: colorOff, hidden: (props2) => props2.type != "color" }, colorAOff: { type: ControlType.Color, defaultValue: colorAOff, title: "Colors Off", hidden: (props2) => props2.type != "gradient" }, colorBOff: { type: ControlType.Color, defaultValue: colorBOff, title: " ", hidden: (props2) => props2.type != "gradient" }, gradientAngle: { type: ControlType.Number, defaultValue: 0, title: "Angle", step: 1, min: 0, max: 360, unit: "\xB0", hidden: (props2) => props2.type != "gradient" } }, ...props };
}
function sortingControls({ defaultSorting = false, hidden = null } = {}) {
  return { sortBy: { type: ControlType.Enum, defaultValue: "field", options: ["field", "favourites", ...defaultSorting ? ["defaultSorting"] : []], optionTitles: ["CMS Field", "Favourites", ...defaultSorting ? ["Default Sorting"] : []], displaySegmentedControl: true, segmentedControlDirection: "vertical", hidden }, fieldName: { type: ControlType.String, defaultValue: "", placeholder: "CMS Field Name", hidden: (props) => props.sortBy !== "field" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, fieldType: { type: ControlType.Enum, defaultValue: "string", options: ["string", "number", "date", "boolean", "enum", "reference"], optionTitles: ["Text", "Number", "Date", "Toggle", "Option", "Reference"], hidden: (props) => props.sortBy !== "field" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, referenceFieldName: { type: ControlType.String, defaultValue: "Title", placeholder: "Reference Field Name", hidden: (props) => props.sortBy !== "field" || props.fieldType !== "reference" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, referenceFieldType: { type: ControlType.Enum, defaultValue: "string", options: ["string", "number", "date", "boolean", "enum"], optionTitles: ["Text", "Number", "Date", "Toggle", "Option"], hidden: (props) => props.sortBy !== "field" || props.fieldType !== "reference" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, stringSort: { type: ControlType.Enum, defaultValue: "ascending", options: ["ascending", "descending"], optionTitles: ["A \u2192 Z", "Z \u2192 A"], displaySegmentedControl: true, title: "Sort", hidden: (props) => sortFieldType(props) !== "string" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, numberSort: { type: ControlType.Enum, defaultValue: "ascending", options: ["ascending", "descending"], optionTitles: ["Ascending \u2191", "Descending \u2193"], displaySegmentedControl: true, segmentedControlDirection: "vertical", title: "Sort", hidden: (props) => sortFieldType(props) !== "number" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, dateSort: { type: ControlType.Enum, defaultValue: "ascending", options: ["ascending", "descending"], optionTitles: ["Ascending \u2191", "Descending \u2193"], displaySegmentedControl: true, segmentedControlDirection: "vertical", title: "Sort", hidden: (props) => sortFieldType(props) !== "date" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, booleanSort: { type: ControlType.Enum, defaultValue: "ascending", options: ["yesNo", "noYes"], optionTitles: ["Yes, No", "No, Yes"], displaySegmentedControl: true, title: "Sort", hidden: (props) => sortFieldType(props) !== "boolean" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, enumSort: { type: ControlType.Enum, defaultValue: "ascending", options: ["optionOrder", "reverseOptionOrder", "ascending", "descending"], optionTitles: ["Option Order", "Reverse Order", "A \u2192 Z", "Z \u2192 A"], displaySegmentedControl: true, segmentedControlDirection: "vertical", title: "Sort", hidden: (props) => sortFieldType(props) !== "enum" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) }, favouritesSort: { type: ControlType.Enum, defaultValue: "favouritesFirst", options: ["favouritesFirst", "favouritesLast"], optionTitles: ["Favourites First", "Favourites Last"], displaySegmentedControl: true, segmentedControlDirection: "vertical", title: "Sort", hidden: (props) => props.sortBy !== "favourites" || (hidden === null || hidden === void 0 ? void 0 : hidden(props)) } };
}
var sortFieldType = (props) => {
  return props.sortBy === "field" ? props.fieldType === "reference" ? props.referenceFieldType : props.fieldType : false;
};

// /:https://framerusercontent.com/modules/PNm0aYRdp2Urx1MCseUn/hIJKk8W2vTfMTpPmM6YJ/CMSLibrary.js
function getCollectionData(collectionList) {
  var _collectionList_props, _collectionList_props_children_props, _collectionList_props_children, _collectionList_props1, _collectionList_props_children_props_children_props, _collectionList_props_children_props_children, _collectionList_props_children_props1, _collectionList_props_children1, _collectionList_props2, _queryParent_props, _collections_;
  let queryParent = null;
  if (collectionList === null || collectionList === void 0 ? void 0 : (_collectionList_props = collectionList.props) === null || _collectionList_props === void 0 ? void 0 : _collectionList_props.query) {
    queryParent = collectionList;
  } else if (collectionList === null || collectionList === void 0 ? void 0 : (_collectionList_props1 = collectionList.props) === null || _collectionList_props1 === void 0 ? void 0 : (_collectionList_props_children = _collectionList_props1.children) === null || _collectionList_props_children === void 0 ? void 0 : (_collectionList_props_children_props = _collectionList_props_children.props) === null || _collectionList_props_children_props === void 0 ? void 0 : _collectionList_props_children_props.query) {
    queryParent = collectionList.props.children;
  } else if (collectionList === null || collectionList === void 0 ? void 0 : (_collectionList_props2 = collectionList.props) === null || _collectionList_props2 === void 0 ? void 0 : (_collectionList_props_children1 = _collectionList_props2.children) === null || _collectionList_props_children1 === void 0 ? void 0 : (_collectionList_props_children_props1 = _collectionList_props_children1.props) === null || _collectionList_props_children_props1 === void 0 ? void 0 : (_collectionList_props_children_props_children = _collectionList_props_children_props1.children) === null || _collectionList_props_children_props_children === void 0 ? void 0 : (_collectionList_props_children_props_children_props = _collectionList_props_children_props_children.props) === null || _collectionList_props_children_props_children_props === void 0 ? void 0 : _collectionList_props_children_props_children_props.query) {
    queryParent = collectionList.props.children.props.children;
  }
  const query = queryParent === null || queryParent === void 0 ? void 0 : (_queryParent_props = queryParent.props) === null || _queryParent_props === void 0 ? void 0 : _queryParent_props.query;
  const from = query === null || query === void 0 ? void 0 : query.from;
  let collections = [];
  if (from) {
    if (from.type === "Collection") {
      collections.push(from);
    } else if (from.type === "LeftJoin") {
      processJoin(from.left, collections);
      processJoin(from.right, collections);
    }
  }
  const select = query === null || query === void 0 ? void 0 : query.select;
  if (collections.length > 1 && Array.isArray(select)) {
    for (const field of select) {
      if (field.type == "Identifier" && field.name == "id" && !field.alias) {
        const mainCollection = collections.find((c3) => c3.alias == field.collection);
        if (mainCollection) {
          collections = [mainCollection, ...collections.filter((c3) => c3 !== mainCollection)];
        }
        break;
      }
    }
  }
  const multiReferenceQueries = {};
  const multiReferenceIdMap = {};
  if (Array.isArray(select)) {
    for (const field of select) {
      if (field.type === "FunctionCall" && (field.functionName === "ARRAY" || field.functionName === "FLAT_ARRAY") && Array.isArray(field.arguments)) {
        for (const argument of field.arguments) {
          var _argument_from;
          if (((_argument_from = argument.from) === null || _argument_from === void 0 ? void 0 : _argument_from.type) === "Collection") {
            var _argument_where;
            const alias = argument.from.alias;
            let fieldId = alias;
            const right = (_argument_where = argument.where) === null || _argument_where === void 0 ? void 0 : _argument_where.right;
            if (right && right.type === "Identifier" && right.name) {
              fieldId = right.name;
            }
            collections.push({ ...argument.from, fieldId });
            multiReferenceIdMap[fieldId] = alias;
            multiReferenceIdMap[alias] = alias;
            multiReferenceQueries[alias] = argument;
          }
        }
      }
    }
  }
  let queryData = (_collections_ = collections[0]) === null || _collections_ === void 0 ? void 0 : _collections_.data;
  const propertyControlsById = {};
  const propertyControlsByTitle = {};
  for (const collection of collections) {
    var _collection_data;
    const byId = {};
    const byName = {};
    propertyControlsById[collection.alias] = byId;
    propertyControlsByTitle[collection.alias] = byName;
    const propertyControls = (_collection_data = collection.data) === null || _collection_data === void 0 ? void 0 : _collection_data.propertyControls;
    for (const id of Object.keys(propertyControls)) {
      const control = { id, ...propertyControls[id] };
      byId[id] = control;
      byName[control.title] = control;
    }
  }
  let childrenFunction = null;
  if (collectionList) {
    var _collectionList_props3, _clpc_props, _clpc_props_children_props, _clpc_props_children, _clpc_props1;
    const clpc = (_collectionList_props3 = collectionList.props) === null || _collectionList_props3 === void 0 ? void 0 : _collectionList_props3.children;
    if (typeof clpc == "function") {
      childrenFunction = clpc;
    } else if (typeof (clpc === null || clpc === void 0 ? void 0 : (_clpc_props = clpc.props) === null || _clpc_props === void 0 ? void 0 : _clpc_props.children) == "function") {
      childrenFunction = clpc.props.children;
    } else if (typeof (clpc === null || clpc === void 0 ? void 0 : (_clpc_props1 = clpc.props) === null || _clpc_props1 === void 0 ? void 0 : (_clpc_props_children = _clpc_props1.children) === null || _clpc_props_children === void 0 ? void 0 : (_clpc_props_children_props = _clpc_props_children.props) === null || _clpc_props_children_props === void 0 ? void 0 : _clpc_props_children_props.children) == "function") {
      childrenFunction = clpc.props.children.props.children;
    }
  }
  return { query, queryParent, queryData, collections, propertyControlsById, propertyControlsByTitle, childrenFunction, multiReferenceQueries, multiReferenceIdMap };
}
function processJoin(join, collections) {
  if (join && typeof join === "object") {
    if (join.type === "Collection") {
      collections.push(join);
    } else if (join.type === "LeftJoin") {
      processJoin(join.left, collections);
      processJoin(join.right, collections);
    }
  }
}
function addFieldsToSelect(fields, query, propertyControlsByTitle, collections) {
  const select = Array.isArray(query === null || query === void 0 ? void 0 : query.select) ? [...query.select] : [];
  for (const field of fields) {
    const selectItem = getSelectItemForField(field.name, field.referenceFieldName, query, propertyControlsByTitle, collections, select);
    if (selectItem) {
      select.push(selectItem);
    }
  }
  return select;
}
function getSelectItemForField(name, referenceFieldName, query, propertyControlsByTitle, collections, select = null) {
  var _collections_, _propertyControlsByTitle_mainAlias, _propertyControlsByTitle_fieldId;
  const mainAlias = ((_collections_ = collections[0]) === null || _collections_ === void 0 ? void 0 : _collections_.alias) || "";
  const propertyControl = (_propertyControlsByTitle_mainAlias = propertyControlsByTitle[mainAlias]) === null || _propertyControlsByTitle_mainAlias === void 0 ? void 0 : _propertyControlsByTitle_mainAlias[name];
  if (!propertyControl) {
    return null;
  }
  const fieldId = propertyControl === null || propertyControl === void 0 ? void 0 : propertyControl.id;
  const alias = referenceFieldName ? fieldId : mainAlias;
  const referencedField = referenceFieldName ? (_propertyControlsByTitle_fieldId = propertyControlsByTitle[fieldId]) === null || _propertyControlsByTitle_fieldId === void 0 ? void 0 : _propertyControlsByTitle_fieldId[referenceFieldName] : null;
  if (select) {
    let matchFound = false;
    for (const item of select) {
      if (item.type === "Identifier") {
        if (referenceFieldName) {
          if (referencedField && item.alias === `${fieldId}.${referencedField.id}` && item.collection === fieldId && item.name === referencedField.id) {
            matchFound = true;
            break;
          }
        } else {
          if (item.name === fieldId && item.collection === alias) {
            matchFound = true;
            break;
          }
        }
      } else if (item.type === "FunctionCall") {
        if (item.alias === fieldId) {
          matchFound = true;
          break;
        }
      }
    }
    if (matchFound) {
      return null;
    }
  }
  if (referenceFieldName) {
    if (referencedField) {
      return { alias: `${fieldId}.${referencedField.id}`, collection: fieldId, name: referencedField.id, type: "Identifier" };
    }
  } else {
    return { collection: alias, name: fieldId, type: "Identifier" };
  }
}

// /:https://framerusercontent.com/modules/JfW6EfEeJnrqM1YQCYmc/GJijJu4WrREqn6Sg1VOH/Masonry.js
import { jsx as _jsx2 } from "react/jsx-runtime";
import { useState, useLayoutEffect, useEffect, useMemo, useRef, Children, isValidElement } from "react";
var DEFAULT_COLUMNS = 1;
var DEFAULT_GAP = 0;
function Masonry({ breakpoints, columns = DEFAULT_COLUMNS, gapH = DEFAULT_GAP, gapV = DEFAULT_GAP, reverse = false, autoArrange = false, alignment = "center", children, style, ...otherProps }, forwardedRef) {
  const elements = useRef([]);
  const previousLayout = useRef([]);
  const [arrange, setArrange] = useState(false);
  const [layoutVersion, setLayoutVersion] = useState(0);
  const resizeObservers = useRef(/* @__PURE__ */ new Map());
  const updateTimeoutRef = useRef(null);
  const earliestChangedIndex = useRef(null);
  const handleElementResize = (element) => {
    if (!resizeObservers.current.has(element)) {
      let lastUpdatedHeight = element.offsetHeight;
      const observer = new ResizeObserver((entries) => {
        const entry = entries[0];
        const newHeight = entry.target.offsetHeight;
        if (newHeight !== lastUpdatedHeight && Math.abs(newHeight - lastUpdatedHeight) > 2) {
          lastUpdatedHeight = newHeight;
          const changedIndex = elements.current.findIndex((el2) => el2.element === element);
          if (earliestChangedIndex.current === null) {
            earliestChangedIndex.current = changedIndex;
          } else {
            earliestChangedIndex.current = Math.min(earliestChangedIndex.current, changedIndex);
          }
          if (!updateTimeoutRef.current) {
            const delay = layoutVersion === 0 ? 10 : 200;
            updateTimeoutRef.current = setTimeout(() => {
              setLayoutVersion((v2) => v2 + 1);
              updateTimeoutRef.current = null;
            }, delay);
          }
        }
      });
      observer.observe(element);
      resizeObservers.current.set(element, observer);
    }
  };
  const addElement = (index) => (element) => {
    if (element !== null) {
      temporaryElements.push({ element, index });
      elements.current = temporaryElements;
      handleElementResize(element);
    }
  };
  useEffect(() => {
    return () => {
      resizeObservers.current.forEach((observer) => observer.disconnect());
      resizeObservers.current.clear();
    };
  }, []);
  useEffect(() => {
    return () => {
      if (updateTimeoutRef.current) {
        clearTimeout(updateTimeoutRef.current);
      }
    };
  }, []);
  useLayoutEffect(() => {
    if (autoArrange && !arrange) setArrange(true);
    if (autoArrange && arrange) setLayoutVersion((v2) => v2 + 1);
    return () => {
      if (autoArrange && arrange) setArrange(false);
    };
  }, [autoArrange]);
  const layout = useMemo(() => {
    if (columns < 1) return [];
    const arrayOfChildren = Children.toArray(children);
    if (reverse) arrayOfChildren.reverse();
    const newLayout = Array.from({ length: columns }, () => {
      return [];
    });
    const columnHeights = newLayout.map(() => 0);
    var _earliestChangedIndex_current;
    const changedIndex = (_earliestChangedIndex_current = earliestChangedIndex.current) !== null && _earliestChangedIndex_current !== void 0 ? _earliestChangedIndex_current : -1;
    const getColumnIndex = (index) => {
      if (autoArrange && arrange && elements.current.length > 0) {
        if (changedIndex === -1 || index > changedIndex) {
          const columnIndex = columnHeights.findIndex((item) => {
            return item === Math.min(...columnHeights);
          });
          const element = elements.current.find((item) => item.index === index);
          const elementHeight = element === null || element === void 0 ? void 0 : element.element.getBoundingClientRect().height;
          columnHeights[columnIndex] += (elementHeight || 0) + gapV;
          return columnIndex;
        } else {
          const element = elements.current.find((item) => item.index === index);
          if (element) {
            const currentColumn = previousLayout.current.findIndex((col) => col.some((item) => item.index === index));
            if (currentColumn !== -1) {
              const elementHeight2 = element.element.getBoundingClientRect().height;
              columnHeights[currentColumn] += (elementHeight2 || 0) + gapV;
              return currentColumn;
            }
          }
          const columnIndex = columnHeights.findIndex((item) => {
            return item === Math.min(...columnHeights);
          });
          const elementHeight = element === null || element === void 0 ? void 0 : element.element.getBoundingClientRect().height;
          columnHeights[columnIndex] += (elementHeight || 0) + gapV;
          return columnIndex;
        }
      }
      return index % columns;
    };
    arrayOfChildren.forEach((child, index) => {
      if (child && /* @__PURE__ */ isValidElement(child)) {
        newLayout[getColumnIndex(index)].push({ element: child, index });
      }
    });
    previousLayout.current = newLayout;
    return newLayout;
  }, [layoutVersion, arrange, children, columns, reverse, autoArrange]);
  const temporaryElements = [];
  return /* @__PURE__ */ _jsx2("div", { ref: forwardedRef, style: { display: "flex", gap: gapH, ...style }, ...otherProps, children: layout.map((column, columnIndex) => /* @__PURE__ */ _jsx2("div", { style: { flex: 1, display: "flex", flexDirection: "column", alignItems: alignment, gap: gapV }, children: column.map((item, itemIndex) => /* @__PURE__ */ _jsx2("div", { ref: addElement(item.index), children: item.element }, itemIndex)) }, columnIndex)) });
}
Masonry.displayName = "Superfields/Masonry";

// /:https://framerusercontent.com/modules/XPZpWLgM1p9otlAim6ab/2EM1XAFs06y2ux1V0qay/zustand.js
import { useEffect as t, useLayoutEffect as e, useReducer as n, useRef as r, useDebugValue as c } from "react";
function createStore(t23) {
  let e22;
  const n22 = /* @__PURE__ */ new Set();
  const setState = (t32, r32) => {
    const c22 = "function" === typeof t32 ? t32(e22) : t32;
    if (c22 !== e22) {
      const t42 = e22;
      e22 = r32 ? c22 : Object.assign({}, e22, c22);
      n22.forEach((n32) => n32(e22, t42));
    }
  };
  const getState = () => e22;
  const subscribeWithSelector = (t32, r32 = getState, c22 = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let o22 = r32(e22);
    function listenerToAdd() {
      const n32 = r32(e22);
      if (!c22(o22, n32)) {
        const e32 = o22;
        t32(o22 = n32, e32);
      }
    }
    n22.add(listenerToAdd);
    return () => n22.delete(listenerToAdd);
  };
  const subscribe = (t32, e32, r32) => {
    if (e32 || r32) return subscribeWithSelector(t32, e32, r32);
    n22.add(t32);
    return () => n22.delete(t32);
  };
  const destroy = () => n22.clear();
  const r22 = { setState, getState, subscribe, destroy };
  e22 = t23(setState, getState, r22);
  return r22;
}
var o = "undefined" === typeof window || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var s = o ? t : e;
function create(t23) {
  const e22 = "function" === typeof t23 ? createStore(t23) : t23;
  const useStore = (t32 = e22.getState, o22 = Object.is) => {
    const [, u2] = n((t42) => t42 + 1, 0);
    const i2 = e22.getState();
    const a3 = r(i2);
    const d3 = r(t32);
    const l3 = r(o22);
    const f2 = r(false);
    const S2 = r();
    void 0 === S2.current && (S2.current = t32(i2));
    let b2;
    let g3 = false;
    if (a3.current !== i2 || d3.current !== t32 || l3.current !== o22 || f2.current) {
      b2 = t32(i2);
      g3 = !o22(S2.current, b2);
    }
    s(() => {
      g3 && (S2.current = b2);
      a3.current = i2;
      d3.current = t32;
      l3.current = o22;
      f2.current = false;
    });
    const w2 = r(i2);
    s(() => {
      const listener = () => {
        try {
          const t52 = e22.getState();
          const n22 = d3.current(t52);
          if (!l3.current(S2.current, n22)) {
            a3.current = t52;
            S2.current = n22;
            u2();
          }
        } catch (t52) {
          f2.current = true;
          u2();
        }
      };
      const t42 = e22.subscribe(listener);
      e22.getState() !== w2.current && listener();
      return t42;
    }, []);
    const p2 = g3 ? b2 : S2.current;
    c(p2);
    return p2;
  };
  Object.assign(useStore, e22);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const t32 = [useStore, e22];
    return { next() {
      const e32 = t32.length <= 0;
      return { value: t32.shift(), done: e32 };
    } };
  };
  return useStore;
}
function shallow(e22, t23) {
  if (Object.is(e22, t23)) return true;
  if ("object" !== typeof e22 || null === e22 || "object" !== typeof t23 || null === t23) return false;
  const l3 = Object.keys(e22);
  if (l3.length !== Object.keys(t23).length) return false;
  for (let r22 = 0; r22 < l3.length; r22++) if (!Object.prototype.hasOwnProperty.call(t23, l3[r22]) || !Object.is(e22[l3[r22]], t23[l3[r22]])) return false;
  return true;
}

// /:https://framerusercontent.com/modules/OoGHZMzWDzm2mNN7bmeR/CVdUSqwHRYYoh8nXLjx5/Store.js
import { useRef as useRef2, useTransition, useMemo as useMemo2, useEffect as useEffect2 } from "react";
var createInitialState = () => ({ totalItems: 0, filters: {}, randomizationSeed: null, search: "", sortOption: null, defaultSortOption: null, sortingUrlParameter: null, page: 0, itemsPerPage: 0, paginationType: null, paginationActive: false });
var useBaseStore = create((set, get) => ({
  instances: {},
  getState: (id) => {
    var _get_instances_path;
    const path = getCurrentPath();
    const state = (_get_instances_path = get().instances[path]) === null || _get_instances_path === void 0 ? void 0 : _get_instances_path[id];
    return state || createInitialState();
  },
  setState: (id, updates) => {
    const path = getCurrentPath();
    set((state) => ({ instances: { ...state.instances, [path]: { ...state.instances[path], [id]: { ...state.getState(id), ...updates } } } }));
  },
  // Example of how to update a specific state property
  setTotalItems: (id, totalItems) => {
    get().setState(id, { totalItems });
  },
  setFilterValue: (id, fieldName, value) => {
    const currentFilters = get().getState(id).filters;
    get().setState(id, { filters: { ...currentFilters, [fieldName]: { ...currentFilters[fieldName], value } } });
  },
  setRandomizationSeed: (id, randomizationSeed) => {
    get().setState(id, { randomizationSeed });
  },
  setSearch: (id, search) => {
    get().setState(id, { search });
  },
  setSortOption: (id, sortOption) => {
    get().setState(id, { sortOption });
  },
  setPage: (id, page) => {
    get().setState(id, { page });
  }
}));
var useSuperfieldsStore = (id, selector, initialize = null) => {
  const initializedRef = useRef2(false);
  const [_2, startTransition] = useTransition();
  const memoizedFunctions = useMemo2(() => {
    const functions = {};
    const state = useBaseStore.getState();
    for (const key in state) {
      const value = state[key];
      if (typeof value === "function") {
        if (key.startsWith("set")) {
          functions[key] = (...args) => {
            if (typeof window !== "undefined") {
              startTransition(() => value(id, ...args));
            } else {
              value(id, ...args);
            }
          };
        } else {
          functions[key] = (...args) => value(id, ...args);
        }
      }
    }
    return functions;
  }, [id]);
  useEffect2(() => {
    if (initialize && !initializedRef.current) {
      const state = useBaseStore.getState();
      const currentState = state.getState(id);
      const initializedState = { ...currentState };
      initialize(initializedState);
      state.setState(id, initializedState);
      initializedRef.current = true;
    }
  }, []);
  return useBaseStore((state) => {
    var _state_instances_path;
    const path = getCurrentPath();
    if (!((_state_instances_path = state.instances[path]) === null || _state_instances_path === void 0 ? void 0 : _state_instances_path[id])) {
      const initialState = createInitialState();
      state.setState(id, initialState);
    }
    let newState = { ...state.getState(id), ...memoizedFunctions };
    return selector(newState);
  }, shallow);
};
var stdin_default = useSuperfieldsStore;
var getCurrentPath = () => {
  if (typeof window === "undefined") {
    return "/";
  }
  return window.location.pathname;
};

// /:https://esm.sh/*js-cookie@3.0.5/es2022/js-cookie.mjs
function d(r4) {
  for (var t12 = 1; t12 < arguments.length; t12++) {
    var f2 = arguments[t12];
    for (var p2 in f2) r4[p2] = f2[p2];
  }
  return r4;
}
var g = { read: function(r4) {
  return r4[0] === '"' && (r4 = r4.slice(1, -1)), r4.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
}, write: function(r4) {
  return encodeURIComponent(r4).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
} };
function s2(r4, t12) {
  function f2(n4, c3, e5) {
    if (!(typeof document > "u")) {
      e5 = d({}, t12, e5), typeof e5.expires == "number" && (e5.expires = new Date(Date.now() + e5.expires * 864e5)), e5.expires && (e5.expires = e5.expires.toUTCString()), n4 = encodeURIComponent(n4).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
      var o4 = "";
      for (var i2 in e5) e5[i2] && (o4 += "; " + i2, e5[i2] !== true && (o4 += "=" + e5[i2].split(";")[0]));
      return document.cookie = n4 + "=" + r4.write(c3, n4) + o4;
    }
  }
  function p2(n4) {
    if (!(typeof document > "u" || arguments.length && !n4)) {
      for (var c3 = document.cookie ? document.cookie.split("; ") : [], e5 = {}, o4 = 0; o4 < c3.length; o4++) {
        var i2 = c3[o4].split("="), v2 = i2.slice(1).join("=");
        try {
          var u2 = decodeURIComponent(i2[0]);
          if (e5[u2] = r4.read(v2, u2), n4 === u2) break;
        } catch {
        }
      }
      return n4 ? e5[n4] : e5;
    }
  }
  return Object.create({ set: f2, get: p2, remove: function(n4, c3) {
    f2(n4, "", d({}, c3, { expires: -1 }));
  }, withAttributes: function(n4) {
    return s2(this.converter, d({}, this.attributes, n4));
  }, withConverter: function(n4) {
    return s2(d({}, this.converter, n4), this.attributes);
  } }, { attributes: { value: Object.freeze(t12) }, converter: { value: Object.freeze(r4) } });
}
var C = s2(g, { path: "/" });

// /:https://framerusercontent.com/modules/c1jaZMVo1HBulMCJfZHW/4SCjOKih77grfiVkVrTg/FavouriteStore.js
var useBaseStore2 = create((set, get) => ({ collections: {}, getFavourites: (slugFieldId) => {
  const state = get().collections[slugFieldId];
  return state || [];
}, setFavourites: (slugFieldId, favourites) => {
  set((state) => ({ collections: { ...state.collections, [slugFieldId]: favourites } }));
  C.set(`superfieldsFavourites_${slugFieldId}`, favourites);
}, addFavourite: (slugFieldId, favourite) => {
  const currentFavourites = get().getFavourites(slugFieldId);
  get().setFavourites(slugFieldId, [...currentFavourites, favourite]);
}, removeFavourite: (slugFieldId, favouriteToRemove) => {
  const currentFavourites = get().getFavourites(slugFieldId);
  get().setFavourites(slugFieldId, currentFavourites.filter((fav) => fav !== favouriteToRemove));
} }));
var useFavouriteStore = (slugFieldId, selector, cmsCollectionName = null) => {
  return useBaseStore2((state) => {
    let newState = { favourites: state.getFavourites(slugFieldId) };
    if (!Array.isArray(state.collections[slugFieldId])) {
      try {
        const cookieId = `superfieldsFavourites_${slugFieldId}`;
        let savedState = C.get(cookieId);
        if (!savedState && cmsCollectionName) {
          const cmsNameCookieId = `superfieldsFavourites_${cmsCollectionName}`;
          savedState = C.get(cmsNameCookieId);
          if (savedState) {
            C.set(cookieId, savedState);
            C.remove(cmsNameCookieId);
          }
        }
        if (savedState) {
          const savedFavourites = savedState.split(",");
          state.setFavourites(slugFieldId, savedFavourites);
          newState.favourites = savedFavourites;
        }
      } catch (error) {
        console.error("Failed to load or parse favourites cookie:", error);
      }
    }
    for (const key in state) {
      const value = state[key];
      if (typeof value === "function") {
        newState[key] = (...args) => value(slugFieldId, ...args);
      } else {
        newState[key] = value;
      }
    }
    return selector(newState);
  });
};
var stdin_default2 = useFavouriteStore;

// /:https://framerusercontent.com/modules/1o5Bk6b6qvbR58A6b2Ej/0pQTfUARQx5sQl0x4j9H/Superfields.js
var fieldTypeNames = { [FieldType.String]: "Text", [FieldType.Number]: "Number", [FieldType.Date]: "Date", [FieldType.Boolean]: "Toggle", [FieldType.Enum]: "Option" };
var Order;
(function(Order2) {
  Order2["Ascending"] = "ascending";
  Order2["Descending"] = "descending";
})(Order || (Order = {}));
var PaginationType;
(function(PaginationType2) {
  PaginationType2["PrevNextButtons"] = "prevNextButtons";
  PaginationType2["LoadMoreButton"] = "loadMoreButton";
  PaginationType2["FramerPagination"] = "framerPagination";
})(PaginationType || (PaginationType = {}));
var LayoutType;
(function(LayoutType2) {
  LayoutType2["Stack"] = "stack";
  LayoutType2["Grid"] = "grid";
  LayoutType2["Masonry"] = "masonry";
})(LayoutType || (LayoutType = {}));
var SearchFieldType;
(function(SearchFieldType2) {
  SearchFieldType2["Default"] = "default";
  SearchFieldType2["Reference"] = "reference";
})(SearchFieldType || (SearchFieldType = {}));
function Superfields(props) {
  var _props_collectionList, _props_emptyState, _queryParent_props, _mainPropertyControlsByTitle_, _filters_FAVOURITES_FILTER_ID, _collectionList_props, _collectionList_props1;
  const { superfieldsId: superfieldsId2, layout, componentConfig, cmsCollectionName, favouritesOnly, searchFields, sortingField, urlParameters, slugFieldName, scrollUp, customOverrideFilter = null, customOverrideSort = null } = props;
  const collectionList = (_props_collectionList = props.collectionList) === null || _props_collectionList === void 0 ? void 0 : _props_collectionList[0];
  const emptyState = (_props_emptyState = props.emptyState) === null || _props_emptyState === void 0 ? void 0 : _props_emptyState[0];
  const isCanvas = RenderTarget.current() === RenderTarget.canvas;
  const isOptimizing = typeof window === "undefined";
  const scrollUpRef = useRef3(null);
  const itemCountRef = useRef3(-1);
  const isFirstRender = useRef3(true);
  const { query, queryParent, propertyControlsById, propertyControlsByTitle, childrenFunction, collections, multiReferenceQueries, multiReferenceIdMap } = useMemo3(() => getCollectionData(collectionList), [collectionList]);
  const mainCollection = collections[0];
  const framerPaginationSize = isCanvas ? 0 : (queryParent === null || queryParent === void 0 ? void 0 : (_queryParent_props = queryParent.props) === null || _queryParent_props === void 0 ? void 0 : _queryParent_props.pageSize) || 0;
  const framerPagination = framerPaginationSize > 0;
  const [filters, randomizationSeed, search, sortOption, defaultSortOption, sortingUrlParameter, paginationActive, paginationType, itemsPerPage, page, setPage, setTotalItems] = stdin_default(superfieldsId2, (state) => [state.filters, state.randomizationSeed, state.search, state.sortOption, state.defaultSortOption, state.sortingUrlParameter, state.paginationActive, state.paginationType, state.itemsPerPage, state.page, state.setPage, state.setTotalItems], (state) => {
    state.itemsPerPage = framerPagination ? framerPaginationSize : props.pagination ? props.itemsPerPage : 0;
    state.paginationType = framerPagination ? "framerPagination" : props.pagination ? props.paginationType : null;
    state.paginationActive = framerPagination || props.pagination;
    if (!isOptimizing && !isCanvas) {
      if (props.randomize) {
        state.randomizationSeed = Math.floor(Math.random() * 1e8);
      }
      const urlParams = new URLSearchParams(window.location.search);
      if ((urlParameters === null || urlParameters === void 0 ? void 0 : urlParameters.search) && urlParameters.searchName) {
        const searchParam = urlParams.get(urlParameters.searchName);
        if (searchParam) {
          state.search = searchParam;
        }
      }
      if ((urlParameters === null || urlParameters === void 0 ? void 0 : urlParameters.pagination) && urlParameters.paginationName) {
        const pageParam = urlParams.get(urlParameters.paginationName);
        if (pageParam) {
          const parsedPage = parseInt(pageParam, 10);
          const maxPages = Math.ceil(data.length / state.itemsPerPage);
          if (!isNaN(parsedPage) && parsedPage >= 1 && parsedPage <= maxPages) {
            state.page = parsedPage - 1;
          }
        }
      }
    }
  });
  const randomize = props.randomize || (randomizationSeed ? true : false);
  const mainAlias = mainCollection === null || mainCollection === void 0 ? void 0 : mainCollection.alias;
  const mainPropertyControlsByTitle = propertyControlsByTitle[mainAlias] || {};
  const mainPropertyControlsById = propertyControlsById[mainAlias] || {};
  const slugFieldId = (_mainPropertyControlsByTitle_ = mainPropertyControlsByTitle[slugFieldName || "Slug"]) === null || _mainPropertyControlsByTitle_ === void 0 ? void 0 : _mainPropertyControlsByTitle_.id;
  const filterIds = Object.keys(filters);
  let sort = props.sorting ? sortingField : null;
  if (sortOption && sortOption.id !== DEFAULT_SORTING_ID) {
    sort = sortOption;
  }
  const favourites = stdin_default2(slugFieldId, (state) => state.favourites, cmsCollectionName);
  const select = useMemo3(() => {
    return modifySelect(query, filters, props.search, searchFields, sort, propertyControlsByTitle, collections);
  }, [query, filters, props.search, searchFields, sort === null || sort === void 0 ? void 0 : sort.sortBy, sort === null || sort === void 0 ? void 0 : sort.fieldName]);
  const multiReferenceSelects = useMemo3(() => {
    const selects = {};
    for (const alias of Object.keys(multiReferenceQueries)) {
      let cmsField = mainPropertyControlsById[alias];
      if (!cmsField) {
        for (const key of Object.keys(multiReferenceIdMap)) {
          if (multiReferenceIdMap[key] === alias) {
            cmsField = mainPropertyControlsById[key];
            break;
          }
        }
      }
      if (cmsField) {
        const fieldTitle = cmsField.title;
        const referenceSearchFields = [];
        for (const searchField of searchFields) {
          if (searchField.fieldType === "reference" && searchField.fieldName === fieldTitle) {
            referenceSearchFields.push({ fieldName: searchField.referenceFieldName, fieldType: "default" });
          }
        }
        const referenceFilters = {};
        for (const filterId of Object.keys(filters)) {
          const filter = filters[filterId];
          if (filter.fieldType === FilterFieldType.MultiReference && filter.fieldName === fieldTitle) {
            referenceFilters[filterId] = { ...filter, fieldName: filter.referenceFieldName, fieldType: filter.referenceFieldType, referenceFieldName: void 0, referenceFieldType: void 0 };
          }
        }
        selects[alias] = modifySelect(multiReferenceQueries[alias], referenceFilters, props.search, referenceSearchFields, null, propertyControlsByTitle, collections);
      } else {
        const rQuery = multiReferenceQueries[alias];
        if (rQuery) {
          selects[alias] = rQuery.select;
        }
      }
    }
    return selects;
  }, [multiReferenceQueries, filters, props.search, searchFields]);
  const originalData = query ? useQueryData({ ...query, select }) : [];
  const multiReferenceItemsById = {};
  for (const fieldId of Object.keys(multiReferenceQueries)) {
    const refSelect = multiReferenceSelects[fieldId];
    const refQuery = multiReferenceQueries[fieldId];
    const refDataItemsById = {};
    if (select && query) {
      const refData = useQueryData({ ...refQuery, select: refSelect, where: void 0, orderBy: void 0 });
      for (const item of refData) {
        refDataItemsById[item.id] = item;
      }
    }
    multiReferenceItemsById[fieldId] = refDataItemsById;
  }
  const data = mapCollectionDataValues(originalData, propertyControlsById[mainAlias], multiReferenceItemsById, multiReferenceIdMap);
  const dataIds = originalData.map((item) => item.id);
  const dataItemsById = {};
  if (!isCanvas && Array.isArray(data)) {
    for (const item of data) {
      dataItemsById[item.id] = item;
    }
  }
  const scrollToTop = () => {
    if (scrollUp && scrollUpRef.current && !isOptimizing && !isCanvas) {
      const rect = scrollUpRef.current.getBoundingClientRect();
      const topIsInView = rect.top >= 0 && rect.top <= window.innerHeight;
      if (!topIsInView) {
        scrollUpRef.current.scrollIntoView({ behavior: scrollUp.scrollStyle });
      }
    }
  };
  useEffect3(() => {
    if (isFirstRender.current) {
      return;
    }
    if (scrollUp && (scrollUp.filteringEnabled && filterIds.length > 0 || scrollUp.sortingEnabled && (sort === null || sort === void 0 ? void 0 : sort.sortBy) !== "defaultSorting")) {
      scrollToTop();
    }
  }, [filters, sort === null || sort === void 0 ? void 0 : sort.sortBy]);
  useEffect3(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    if (paginationActive && scrollUp && scrollUp.paginationEnabled && paginationType == "prevNextButtons") {
      scrollToTop();
    }
    if (paginationActive && (urlParameters === null || urlParameters === void 0 ? void 0 : urlParameters.pagination) && urlParameters.paginationName && !isOptimizing) {
      const url = new URL(window.location.href);
      const pageNumber = page + 1;
      if (pageNumber > 1) {
        url.searchParams.set(urlParameters.paginationName, pageNumber.toString());
      } else {
        url.searchParams.delete(urlParameters.paginationName);
      }
      window.history.replaceState({ path: url.href }, "", url.href);
    }
  }, [page, paginationActive, paginationType, urlParameters]);
  useEffect3(() => {
    if (!(urlParameters === null || urlParameters === void 0 ? void 0 : urlParameters.search) || !urlParameters.searchName || isCanvas || isOptimizing) {
      return;
    }
    const url = new URL(window.location.href);
    if (search) {
      url.searchParams.set(urlParameters.searchName, search);
    } else {
      url.searchParams.delete(urlParameters.searchName);
    }
    window.history.replaceState({ path: url.href }, "", url.href);
  }, [search, urlParameters]);
  useEffect3(() => {
    if (isCanvas || isOptimizing) {
      return;
    }
    const url = new URL(window.location.href);
    let hasUrlParameterFilter = false;
    for (const filterId of filterIds) {
      const filter = filters[filterId];
      if (filter && filter.urlParameter) {
        hasUrlParameterFilter = true;
        const value = filter.value;
        if (value != null && value !== void 0 && value !== "") {
          url.searchParams.set(filter.urlParameter, value.toString());
        } else {
          url.searchParams.delete(filter.urlParameter);
        }
      }
    }
    if (hasUrlParameterFilter) {
      window.history.replaceState({ path: url.href }, "", url.href);
    }
  }, [filters, urlParameters]);
  useEffect3(() => {
    if (isCanvas || isOptimizing || !sortingUrlParameter) {
      return;
    }
    const url = new URL(window.location.href);
    if (sortOption && sortOption.title !== (defaultSortOption === null || defaultSortOption === void 0 ? void 0 : defaultSortOption.title)) {
      url.searchParams.set(sortingUrlParameter, sortOption.title);
    } else {
      url.searchParams.delete(sortingUrlParameter);
    }
    window.history.replaceState({ path: url.href }, "", url.href);
  }, [sortOption, defaultSortOption, sortingUrlParameter]);
  const filteredData = useMemo3(() => {
    if (isCanvas || !filterIds.length) {
      return dataIds;
    }
    let itemIds2 = dataIds;
    for (const filterId of filterIds) {
      if (filterId == FAVOURITES_FILTER_ID) {
        continue;
      }
      const filter = filters[filterId];
      const { fieldName, fieldType } = filter;
      const filterValue = filter.value;
      const conditionContains = (filter === null || filter === void 0 ? void 0 : filter.condition) === FilterTextCondition.Contains;
      const fields = [];
      if (fieldType === FilterFieldType.MultipleOptions) {
        for (const n4 of fieldName.split(DELIMITER)) {
          const field = mainPropertyControlsByTitle[n4.trim()];
          if (field) {
            fields.push(field);
          }
        }
      } else if (fieldType === FilterFieldType.Reference || fieldType === FilterFieldType.MultiReference) {
        const { referenceFieldName } = filter;
        const field = mainPropertyControlsByTitle[fieldName];
        const isMultiRef = (field === null || field === void 0 ? void 0 : field.type) === "multicollectionreference";
        if (field && (field.type === "collectionreference" || isMultiRef)) {
          var _collection_data;
          const collection = collections.find((c3) => c3.alias === field.id || isMultiRef && c3.alias === multiReferenceIdMap[field.id]);
          const collectionPropControls = collection === null || collection === void 0 ? void 0 : (_collection_data = collection.data) === null || _collection_data === void 0 ? void 0 : _collection_data.propertyControls;
          if (collectionPropControls) {
            let propertyControlId = null;
            let propertyControl = null;
            for (const propertyId of Object.keys(collectionPropControls)) {
              const control = collectionPropControls[propertyId];
              if (control.title === referenceFieldName) {
                propertyControlId = propertyId;
                propertyControl = control;
                break;
              }
            }
            if (propertyControl && propertyControlId) {
              if (isMultiRef) {
                fields.push({ ...field, referenceAlias: multiReferenceIdMap[field.id], referenceId: propertyControlId, referenceType: propertyControl.type });
              } else {
                fields.push({ id: `${field.id}.${propertyControlId}`, type: propertyControl.type });
              }
            }
          }
        }
      } else {
        const field = mainPropertyControlsByTitle[fieldName];
        if (field) {
          fields.push(field);
        }
      }
      const isMultipleFields = fields.length > 1;
      if (filter && fields.length && filterValue != null && filterValue != void 0) {
        const filteredData2 = [];
        for (const id of itemIds2) {
          let foundMatch = false;
          const dataItem = dataItemsById[id];
          if (isMultipleFields) {
            for (const field of fields) {
              if (processField(field, dataItem[field.id], filterValue, filter.multiSelect, conditionContains, multiReferenceItemsById)) {
                foundMatch = true;
                break;
              }
            }
          } else {
            const field = fields[0];
            foundMatch = processField(field, dataItem[field.id], filterValue, filter.multiSelect, conditionContains, multiReferenceItemsById);
          }
          if (foundMatch) {
            filteredData2.push(id);
          }
        }
        itemIds2 = filteredData2;
      }
    }
    return itemIds2;
  }, [filters, data]);
  const favouriteFilterValue = (_filters_FAVOURITES_FILTER_ID = filters[FAVOURITES_FILTER_ID]) === null || _filters_FAVOURITES_FILTER_ID === void 0 ? void 0 : _filters_FAVOURITES_FILTER_ID.value;
  const favouriteFilteredData = useMemo3(() => {
    if (isCanvas || !slugFieldId || !favouritesOnly && typeof favouriteFilterValue !== FieldType.Boolean) {
      return dataIds;
    }
    const shouldFilterFavorites = favouriteFilterValue === true || favouritesOnly;
    if (!Array.isArray(favourites) || favourites.length === 0) {
      if (shouldFilterFavorites) {
        return [];
      }
    } else {
      return dataIds.filter((id) => favourites.includes(dataItemsById[id][slugFieldId]) === shouldFilterFavorites);
    }
    return dataIds;
  }, [favouriteFilterValue, favouritesOnly, favourites, data]);
  const customFilteredData = useMemo3(() => {
    if (!customOverrideFilter) {
      return dataIds;
    }
    const value = customOverrideFilter({ dataIds, dataItemsById, collections, propertyControlsById, propertyControlsByTitle });
    if (Array.isArray(value)) {
      return value;
    }
    return dataIds;
  }, [customOverrideFilter, data]);
  var _search_trim_toLowerCase;
  const searchText = (_search_trim_toLowerCase = search === null || search === void 0 ? void 0 : search.trim().toLowerCase()) !== null && _search_trim_toLowerCase !== void 0 ? _search_trim_toLowerCase : "";
  const [searchData, hasSearch, missingSearchField] = useMemo3(() => {
    if (isCanvas || !searchText.length || !Array.isArray(data)) {
      return [dataIds, false, null];
    }
    let missingFieldName = null;
    const levels = [[...dataIds], [], [], [], []];
    const itemLevels = new Array(data.length).fill(0);
    for (let i2 = 0; i2 < searchFields.length; i2++) {
      const { fieldType, fieldName, referenceFieldName } = searchFields[i2];
      const { property } = getPropertyControl(fieldName, fieldType, referenceFieldName, null, propertyControlsByTitle, mainAlias, "Title");
      if (!property) {
        missingFieldName = fieldName;
        break;
      }
      const propertyID = property.id;
      const propertyType = property.type;
      const propIsString = propertyType == FieldType.String || propertyType == FieldType.Enum;
      const propIsNumber = propertyType == FieldType.Number;
      const propIsMultiReference = propertyType == "multicollectionreference";
      for (const ii in data) {
        const cmsItem = data[ii];
        let level = 0;
        if (propIsMultiReference) {
          var _dataItemsById_cmsItem_id;
          const items = (_dataItemsById_cmsItem_id = dataItemsById[cmsItem.id]) === null || _dataItemsById_cmsItem_id === void 0 ? void 0 : _dataItemsById_cmsItem_id[propertyID];
          const alias = multiReferenceIdMap[property.id];
          const propertyControls = propertyControlsByTitle[alias];
          if (propertyControls && typeof propertyControls === "object" && Array.isArray(items)) {
            const rPropertyControl = propertyControls[referenceFieldName || "Title"];
            const propId = rPropertyControl === null || rPropertyControl === void 0 ? void 0 : rPropertyControl.id;
            if (propId) {
              for (const rItem of items) {
                if (rItem) {
                  const rValue = rItem[propId];
                  level = Math.max(level, getSearchLevelForValue(rValue, searchText));
                }
              }
            }
          }
        } else {
          var _dataItemsById_cmsItem_id1;
          const value = (_dataItemsById_cmsItem_id1 = dataItemsById[cmsItem.id]) === null || _dataItemsById_cmsItem_id1 === void 0 ? void 0 : _dataItemsById_cmsItem_id1[propertyID];
          level = getSearchLevelForValue(value, searchText);
        }
        const oldLevel = itemLevels[ii];
        if (level > oldLevel) {
          const oldLevelItems = [];
          for (const item of levels[oldLevel]) {
            if (item != cmsItem.id) {
              oldLevelItems.push(item);
            }
          }
          levels[oldLevel] = oldLevelItems;
          levels[level].push(cmsItem.id);
          itemLevels[ii] = level;
        }
      }
    }
    if (missingFieldName) {
      return [dataIds, false, missingFieldName];
    }
    return [[...levels[4], ...levels[3], ...levels[2], ...levels[1]], true, missingFieldName];
  }, [searchText, data, searchFields]);
  let itemIds = searchData.filter((itemId) => filteredData.includes(itemId) && favouriteFilteredData.includes(itemId) && customFilteredData.includes(itemId));
  const itemCount = itemIds.length;
  const pageCount = itemsPerPage && itemCount ? Math.ceil(itemCount / itemsPerPage) : 1;
  if (itemCount !== itemCountRef.current) {
    setTotalItems(itemCount);
  }
  itemCountRef.current = itemCount;
  const dataOrder = useMemo3(() => {
    if (randomizationSeed && !isCanvas && Array.isArray(data)) {
      const newDataOrder = Array.from({ length: data.length }, (_2, i2) => i2);
      return shuffle(newDataOrder, randomizationSeed);
    }
    return null;
  }, [randomizationSeed, isCanvas, data]);
  if (!isCanvas && !hasSearch && randomize) {
    let orderedItemIds = dataIds;
    if (dataOrder) {
      orderedItemIds = new Array(dataIds.length);
      for (let i2 = 0; i2 < dataOrder.length; i2++) {
        orderedItemIds[dataOrder[i2]] = dataIds[i2];
      }
    }
    itemIds = orderedItemIds.filter((itemId) => itemIds.includes(itemId));
  }
  const canSort = !isCanvas && !randomize && !hasSearch;
  let missingSortField = "";
  let mismatchedSortFieldName = "";
  let mismatchedSortFieldType = "";
  if (canSort && sort && sort.sortBy !== "defaultSorting") {
    const { sortBy } = sort;
    const isReference = sort.fieldType === "reference";
    const fieldType = isReference ? sort.referenceFieldType : sort.fieldType;
    const { property, mismatchedFieldName, mismatchedFieldType } = getPropertyControl(sort.fieldName, sort.fieldType, sort.referenceFieldName, sort.referenceFieldType, propertyControlsByTitle, mainAlias);
    if (mismatchedFieldName) {
      mismatchedSortFieldName = mismatchedFieldName;
      mismatchedSortFieldType = mismatchedFieldType;
    } else {
      const fieldId = property === null || property === void 0 ? void 0 : property.id;
      if (sortBy === "field" && fieldId || sortBy === "favourites" && slugFieldId) {
        const isAscending = sortBy === "favourites" ? sort.favouritesSort === "favouritesLast" : fieldType === FieldType.String && sort.stringSort === "ascending" || fieldType === FieldType.Number && sort.numberSort === "ascending" || fieldType === FieldType.Date && sort.dateSort === "ascending" || fieldType === FieldType.Boolean && sort.booleanSort === "noYes" || fieldType === FieldType.Enum && (sort.enumSort === "optionOrder" || sort.enumSort === "ascending");
        const getSortValue = (id) => {
          var _dataItemsById_id;
          if (sortBy === "favourites") {
            var _dataItemsById_id1;
            const slug = (_dataItemsById_id1 = dataItemsById[id]) === null || _dataItemsById_id1 === void 0 ? void 0 : _dataItemsById_id1[slugFieldId];
            return Array.isArray(favourites) && favourites.includes(slug) ? 1 : 0;
          }
          const value = (_dataItemsById_id = dataItemsById[id]) === null || _dataItemsById_id === void 0 ? void 0 : _dataItemsById_id[fieldId];
          if (value == null) {
            return null;
          }
          switch (fieldType) {
            case FieldType.Number:
              return Number(value);
            case FieldType.Date:
              return new Date(value).getTime();
            case FieldType.Boolean:
              return value ? 1 : 0;
            case FieldType.Enum:
              return sort.enumSort === "optionOrder" || sort.enumSort === "reverseOptionOrder" ? property.optionTitles ? property.optionTitles.indexOf(value) : -1 : String(value);
            default:
              return String(value);
          }
        };
        const sortedItemIds = [...itemIds].sort((a3, b2) => {
          const aValue = getSortValue(a3);
          const bValue = getSortValue(b2);
          if (aValue === null && bValue === null) return 0;
          if (aValue === null) return 1;
          if (bValue === null) return -1;
          let comparison;
          if (fieldType === FieldType.String || fieldType === FieldType.Enum && (sort.enumSort === "ascending" || sort.enumSort === "descending")) {
            comparison = aValue.localeCompare(bValue);
          } else {
            comparison = aValue < bValue ? -1 : aValue > bValue ? 1 : 0;
          }
          return isAscending ? comparison : -comparison;
        });
        itemIds = sortedItemIds;
      } else {
        missingSortField = sort.fieldName;
      }
    }
  }
  if (canSort && customOverrideSort) {
    const value = customOverrideSort({ itemIds, dataItemsById, collections, propertyControlsById, propertyControlsByTitle });
    if (Array.isArray(value)) {
      itemIds = value;
    }
  }
  if (!isCanvas && paginationActive) {
    switch (paginationType) {
      case "prevNextButtons":
        itemIds = itemIds.slice(page * itemsPerPage, (page + 1) * itemsPerPage);
        break;
      case "loadMoreButton":
      case "framerPagination":
        itemIds = itemIds.slice(0, (page + 1) * itemsPerPage);
        break;
    }
  }
  const memoizedChildren = useMemo3(() => {
    var _clChildren_props;
    if (isCanvas || !collectionList || !query || !childrenFunction) {
      return null;
    }
    const { offset, limit } = query;
    const paginationInfo = { currentPage: page + 1, totalPages: pageCount, isLoading: false };
    const loadMore = () => {
      if (paginationActive) {
        const newPage = page + 1;
        if (newPage >= 0 && newPage < pageCount) {
          setPage(newPage);
        }
      }
    };
    const originalDataItemsById = {};
    for (const item of originalData) {
      originalDataItemsById[item.id] = item;
    }
    const items = itemIds.map((itemId) => originalDataItemsById[itemId]).filter(Boolean);
    let clChildren = childrenFunction(items, paginationInfo, loadMore);
    const modifyChildren = (elements) => {
      if (componentConfig && componentConfig.variant.length > 0 && (elements === null || elements === void 0 ? void 0 : elements.length)) {
        const newChildren = [];
        let isComponentWithVariants = true;
        for (let i2 = 0; i2 < elements.length; i2++) {
          var _child_props3;
          const child = elements[i2];
          const component = /* @__PURE__ */ _jsx3(MemoizedComponentVariantSwitch, { child, componentConfig }, (_child_props3 = child.props) === null || _child_props3 === void 0 ? void 0 : _child_props3.id);
          if (component === child) {
            isComponentWithVariants = false;
            break;
          } else {
            newChildren.push(component);
          }
        }
        if (isComponentWithVariants) {
          return newChildren;
        }
      }
      return elements;
    };
    let children = null;
    if (Array.isArray(clChildren)) {
      children = modifyChildren(clChildren);
    } else if (Array.isArray(clChildren === null || clChildren === void 0 ? void 0 : (_clChildren_props = clChildren.props) === null || _clChildren_props === void 0 ? void 0 : _clChildren_props.children)) {
      const childrenArray = clChildren.props.children;
      let arrayIndex = childrenArray.findIndex((child) => Array.isArray(child));
      if (arrayIndex == -1) {
        children = modifyChildren(childrenArray);
      } else {
        let newChildren = [];
        for (const child of childrenArray) {
          if (Array.isArray(child)) {
            newChildren = newChildren.concat(modifyChildren(child));
          } else {
            newChildren.push(child);
          }
        }
        children = newChildren;
      }
    }
    const childrenSlugs = [];
    if (Array.isArray(children)) {
      for (const child of children) {
        var _child_props_child, _child_props2;
        let slug = null;
        const id = (_child_props2 = child.props) === null || _child_props2 === void 0 ? void 0 : (_child_props_child = _child_props2.child) === null || _child_props_child === void 0 ? void 0 : _child_props_child.key;
        if (id) {
          var _dataItemsById_id;
          slug = (_dataItemsById_id = dataItemsById[id]) === null || _dataItemsById_id === void 0 ? void 0 : _dataItemsById_id[slugFieldId];
        }
        childrenSlugs.push(slug);
      }
    }
    return children.map((child, index) => /* @__PURE__ */ _jsx3(PathVariablesContext2.Provider, { value: { [slugFieldId]: childrenSlugs[index] || null }, children: child }));
  }, [isCanvas, collectionList, query, itemIds, page, componentConfig]);
  if (!collectionList) {
    return /* @__PURE__ */ _jsx3(Message, { title: "Connect a CMS Collection List", subtitle: "Drag the handle on the right side to a Collection List or select from the dropdown list. The Collection List must be outside of a page to be connected." });
  } else if (!isCanvas && !query) {
    return /* @__PURE__ */ _jsx3(Message, { title: "Connect a CMS Collection List", subtitle: "The layer that's connected isn't a Collection List. Make sure the Collection List isn't inside of any other layers or components when connecting it." });
  } else if (missingSearchField) {
    return /* @__PURE__ */ _jsx3(Message, { title: `"${missingSearchField}" field does not exist in your CMS collection`, subtitle: `The field "${missingSearchField}" is in the search fields list, but there are no fields in your CMS collection with that name. Edit the field name in the search fields list or add a new CMS field with that name.` });
  } else if (missingSortField) {
    return /* @__PURE__ */ _jsx3(Message, { title: `"${missingSortField}" field does not exist in your CMS collection`, subtitle: `The field "${missingSortField}" is in the search fields list, but there are no fields in your CMS collection with that name. Edit the field name in the sorting condiguration or add a new CMS field with that name.` });
  } else if (mismatchedSortFieldName) {
    return /* @__PURE__ */ _jsx3(Message, { title: `"${mismatchedSortFieldName}" is not a ${fieldTypeNames[mismatchedSortFieldType] || mismatchedSortFieldType} field.`, subtitle: "Please update the Superfields sorting mode to match the field type on the CMS collection" });
  }
  let layoutStyle = {};
  if (layout) {
    switch (layout.type) {
      case "stack":
        const isVertical = layout.direction == "vertical";
        layoutStyle = { display: "flex", flexDirection: isVertical ? "column" : "row", flexWrap: layout.wrap ? "wrap" : "nowrap", alignItems: isVertical ? layout.alignV : layout.alignH, justifyContent: layout.distribute, gap: layout.gap };
        break;
      case "grid":
        let gridTemplateColumns = "";
        if (layout.columns == "auto") {
          if (layout.gridWidthType == "min") {
            gridTemplateColumns = `repeat(auto-fill, minmax(${layout.gridWidth}px, 1fr))`;
          } else {
            gridTemplateColumns = `repeat(auto-fill, ${layout.gridWidth}px)`;
          }
        } else {
          if (layout.gridWidthType == "min") {
            gridTemplateColumns = `repeat(${layout.columnCount}, minmax(${layout.gridWidth}px, 1fr))`;
          } else {
            gridTemplateColumns = `repeat(${layout.columnCount}, ${layout.gridWidth}px)`;
          }
        }
        let gridAutoRows = "";
        switch (layout.gridHeightType) {
          case "fixed":
            gridAutoRows = `${layout.gridHeight}px`;
            break;
          case "fit":
            gridAutoRows = "min-content";
            break;
        }
        layoutStyle = { display: "grid", gridTemplateColumns, gridAutoRows, justifyContent: layout.gridAlign, alignItems: layout.gridAlignV, columnGap: layout.gapH, rowGap: layout.gapV };
        break;
    }
  }
  const isMasonry = (layout === null || layout === void 0 ? void 0 : layout.type) === "masonry";
  const collectionListStyle = { ...isMasonry ? {} : (_collectionList_props = collectionList.props) === null || _collectionList_props === void 0 ? void 0 : _collectionList_props.style, ...props.style, ...layoutStyle, position: "relative", padding: layout ? layout.paddingIsMixed ? `${layout.paddingTop}px ${layout.paddingRight}px ${layout.paddingBottom}px ${layout.paddingLeft}px` : `${layout.padding}px` : void 0 };
  if (isCanvas) {
    if (collectionList) {
      let paginationPreviewOffset = 0;
      let paginationItemsAfter = 0;
      if (paginationActive && paginationType !== "framerPagination") {
        try {
        } catch {
          console.warn("Failed to calculate Superfields pagination preview offset.");
        }
      }
      if (isMasonry) {
        var _collectionList_props___node_cache, _collectionList_props___node, _collectionList_props2;
        const htmlElement = (_collectionList_props2 = collectionList.props) === null || _collectionList_props2 === void 0 ? void 0 : (_collectionList_props___node = _collectionList_props2.__node) === null || _collectionList_props___node === void 0 ? void 0 : (_collectionList_props___node_cache = _collectionList_props___node.cache) === null || _collectionList_props___node_cache === void 0 ? void 0 : _collectionList_props___node_cache.htmlElement;
        if (htmlElement) {
          var _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children__props, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children_, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children_, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children, _htmlElement_reactFiberKey_memoizedProps_children__props_children_props, _htmlElement_reactFiberKey_memoizedProps_children__props_children, _htmlElement_reactFiberKey_memoizedProps_children__props, _htmlElement_reactFiberKey_memoizedProps_children_, _htmlElement_reactFiberKey_memoizedProps_children, _htmlElement_reactFiberKey_memoizedProps, _htmlElement_reactFiberKey;
          let reactFiberKey = "";
          for (const key of Object.keys(htmlElement)) {
            if (key.startsWith("__reactFiber")) {
              reactFiberKey = key;
            }
          }
          let cmsChildren = (_htmlElement_reactFiberKey = htmlElement[reactFiberKey]) === null || _htmlElement_reactFiberKey === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps = _htmlElement_reactFiberKey.memoizedProps) === null || _htmlElement_reactFiberKey_memoizedProps === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children = _htmlElement_reactFiberKey_memoizedProps.children) === null || _htmlElement_reactFiberKey_memoizedProps_children === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children_ = _htmlElement_reactFiberKey_memoizedProps_children[0]) === null || _htmlElement_reactFiberKey_memoizedProps_children_ === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props = _htmlElement_reactFiberKey_memoizedProps_children_.props) === null || _htmlElement_reactFiberKey_memoizedProps_children__props === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children = _htmlElement_reactFiberKey_memoizedProps_children__props.children) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props = _htmlElement_reactFiberKey_memoizedProps_children__props_children.props) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props.children) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children_ = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children[1]) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children_ === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children_.props) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props.children) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children_ = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children[0]) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children_ === void 0 ? void 0 : (_htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children__props = _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children_.props) === null || _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children__props === void 0 ? void 0 : _htmlElement_reactFiberKey_memoizedProps_children__props_children_props_children__props_children__props.children;
          if (Array.isArray(cmsChildren)) {
            let children = [];
            for (const child of cmsChildren) {
              var _child_props;
              if (child.key == "repeated" && Array.isArray((_child_props = child.props) === null || _child_props === void 0 ? void 0 : _child_props.children)) {
                children = children.concat(child.props.children);
              } else {
                children.push(child);
              }
            }
            return /* @__PURE__ */ _jsx3("div", { "data-superfields": true, style: collectionListStyle, children: /* @__PURE__ */ _jsx3(MemoizedMasonry, { columns: layout.masonryColumns, gap: `${layout.gapV}px ${layout.gapH}px`, alignment: layout.masonryItemWidth === "fit" ? layout.masonryAlign : "stretch", children }) });
          }
        }
      } else {
        var _props_id;
        const id = (_props_id = props.id) !== null && _props_id !== void 0 ? _props_id : "a" + String(Math.floor(Math.random() * 999999999));
        return /* @__PURE__ */ _jsxs2(_Fragment, { children: [/* @__PURE__ */ cloneElement2(collectionList, { id, style: collectionListStyle }), paginationActive && paginationType !== "framerPagination" && /* @__PURE__ */ _jsx3("style", { children: `#${id} > *:nth-child(n+${itemsPerPage + 1 + paginationPreviewOffset})${paginationItemsAfter ? `:not(:nth-last-child(-n+${paginationItemsAfter}))` : ""} { display: none !important; }` })] });
      }
    } else {
      return /* @__PURE__ */ _jsx3("div", { style: { height: 100 } });
    }
  }
  if (!(itemIds === null || itemIds === void 0 ? void 0 : itemIds.length)) {
    if (emptyState) {
      return /* @__PURE__ */ cloneElement2(emptyState, { style: { ...emptyState.props.style, ...props.style }, "data-superfields": true });
    } else {
      return /* @__PURE__ */ _jsx3("div", { "data-superfields": true });
    }
  }
  return /* @__PURE__ */ _jsxs2("div", { ...collectionList.props, style: collectionListStyle, className: isMasonry ? "" : ((_collectionList_props1 = collectionList.props) === null || _collectionList_props1 === void 0 ? void 0 : _collectionList_props1.className) || "", "data-superfields": true, children: [isMasonry ? /* @__PURE__ */ _jsx3(MemoizedMasonry, { columns: layout.masonryColumns, gap: `${layout.gapV}px ${layout.gapH}px`, alignment: layout.masonryItemWidth === "fit" ? layout.masonryAlign : "stretch", autoArrange: true, reverse: false, children: memoizedChildren }) : memoizedChildren, paginationActive && scrollUp && /* @__PURE__ */ _jsx3("div", { ref: scrollUpRef, style: { position: "absolute", top: scrollUp.offset, pointerEvents: "none" } })] });
}
addPropertyControls(Superfields, {
  superfieldsId: { type: ControlType2.Number, defaultValue: 0, step: 1, min: 0, displayStepper: true, title: "ID" },
  collectionList: { type: ControlType2.ComponentInstance },
  emptyState: { type: ControlType2.ComponentInstance },
  layout: { type: ControlType2.Object, optional: true, controls: { type: { type: ControlType2.Enum, defaultValue: "stack", options: ["stack", "grid", "masonry"], optionTitles: ["Stack", "Grid", "Masonry"], displaySegmentedControl: true, segmentedControlDirection: "vertical" }, direction: { type: ControlType2.Enum, defaultValue: "vertical", options: ["horizontal", "vertical"], optionTitles: ["Horizontal", "Vertical"], optionIcons: ["direction-horizontal", "direction-vertical"], displaySegmentedControl: true, hidden: (props) => props.type != "stack" }, distribute: { type: ControlType2.Enum, defaultValue: "start", options: ["start", "center", "end", "space-between", "space-around", "space-evenly"], optionTitles: ["Start", "Center", "End", "Space Between", "Space Around", "Space Evenly"], hidden: (props) => props.type != "stack" }, alignH: { type: ControlType2.Enum, defaultValue: "start", options: ["start", "center", "end"], optionTitles: ["Top", "Center", "Bottom"], optionIcons: ["align-top", "align-middle", "align-bottom"], displaySegmentedControl: true, title: "Align", hidden: (props) => props.type != "stack" || props.direction != "horizontal" }, alignV: { type: ControlType2.Enum, defaultValue: "start", options: ["start", "center", "end"], optionTitles: ["Left", "Center", "Right"], optionIcons: ["align-left", "align-center", "align-right"], displaySegmentedControl: true, title: "Align", hidden: (props) => props.type != "stack" || props.direction != "vertical" }, wrap: { type: ControlType2.Boolean, defaultValue: false, hidden: (props) => props.type != "stack" }, columns: { type: ControlType2.Enum, defaultValue: "fixed", options: ["auto", "fixed"], optionTitles: ["Auto", "Fixed"], displaySegmentedControl: true, hidden: (props) => props.type != "grid" }, columnCount: { type: ControlType2.Number, defaultValue: 2, min: 1, step: 1, displayStepper: true, title: " ", hidden: (props) => props.type != "grid" || props.columns == "auto" }, gridWidthType: { type: ControlType2.Enum, defaultValue: "min", options: ["min", "fixed"], optionTitles: ["Min", "Fixed"], displaySegmentedControl: true, title: "Width", hidden: (props) => props.type != "grid" }, gridWidth: { type: ControlType2.Number, defaultValue: 200, min: 1, step: 1, title: " ", hidden: (props) => props.type != "grid" }, gridHeightType: { type: ControlType2.Enum, defaultValue: "fit", options: ["fit", "fixed"], optionTitles: ["Fit", "Fixed"], displaySegmentedControl: true, title: "Height", hidden: (props) => props.type != "grid" }, gridHeight: { type: ControlType2.Number, defaultValue: 200, min: 1, step: 1, title: " ", hidden: (props) => props.type != "grid" || props.gridHeightType != "fixed" }, gridAlign: { type: ControlType2.Enum, defaultValue: "center", options: ["start", "center", "end"], optionTitles: ["Left", "Center", "Right"], displaySegmentedControl: true, title: "Align", hidden: (props) => props.type != "grid" }, gridAlignV: { type: ControlType2.Enum, defaultValue: "start", options: ["start", "center", "end"], optionTitles: ["Top", "Center", "Bottom"], optionIcons: ["align-top", "align-middle", "align-bottom"], displaySegmentedControl: true, title: " ", hidden: (props) => props.type != "grid" || props.gridHeightType !== "fit" }, masonryColumns: { type: ControlType2.Number, defaultValue: 3, min: 1, step: 1, displayStepper: true, title: "Columns", hidden: (props) => props.type !== "masonry" }, masonryItemWidth: { type: ControlType2.Enum, defaultValue: "fill", options: ["fit", "fill"], optionTitles: ["Fit", "Fill"], displaySegmentedControl: true, title: "Item Width", hidden: (props) => props.type !== "masonry" }, masonryAlign: { type: ControlType2.Enum, defaultValue: "center", options: ["start", "center", "end"], optionTitles: ["Left", "Center", "Right"], displaySegmentedControl: true, title: "Align", hidden: (props) => props.type !== "masonry" || props.masonryItemWidth !== "fit" }, gap: { type: ControlType2.Number, defaultValue: 10, min: 0, step: 1, hidden: (props) => props.type !== "stack" }, gapH: { type: ControlType2.Number, defaultValue: 10, min: 0, step: 1, hidden: (props) => props.type !== "grid" && (props.type !== "masonry" || props.masonryColumns === 1) }, gapV: { type: ControlType2.Number, defaultValue: 10, min: 0, step: 1, hidden: (props) => props.type !== "grid" && props.type !== "masonry" }, padding: { type: ControlType2.FusedNumber, defaultValue: 0, toggleKey: "paddingIsMixed", toggleTitles: ["All", "Individual"], valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"], valueLabels: ["T", "R", "B", "L"], min: 0 } } },
  componentConfig: { type: ControlType2.Object, optional: true, title: "Component", controls: { variant: { type: ControlType2.String, defaultValue: "", placeholder: "Variant Name", preventLocalization: true, description: "Override the component's variant for responsive design.\n\n*Note:* The component must be the only layer inside the Collection List to use this.\n\n*Note:* Variant does not appear while editing. Preview your project to see the variant." } } },
  scrollUp: { type: ControlType2.Object, optional: true, defaultValue: { scrollStyle: "smooth", offset: 0 }, title: "Scroll to Top", description: " ", controls: { scrollStyle: { type: ControlType2.Enum, defaultValue: "smooth", options: ["smooth", "instant"], optionTitles: ["Smooth", "Instant"], displaySegmentedControl: true, title: "Scroll" }, offset: { type: ControlType2.Number, defaultValue: -32, step: 1 }, paginationEnabled: { type: ControlType2.Boolean, defaultValue: true, title: "Pagination" }, filteringEnabled: { type: ControlType2.Boolean, defaultValue: false, title: "Filters" }, sortingEnabled: { type: ControlType2.Boolean, defaultValue: false, title: "Sorting", description: "Scroll to the top of the Superfields component when page, filter, or sorting is changed." } } },
  // urlParameters: {
  //     type: ControlType.Object,
  //     title: "URL Parameters",
  //     description: " ",
  //     controls: {
  //         pagination: {
  //             type: ControlType.Boolean,
  //             defaultValue: false,
  //         },
  //         paginationName: {
  //             type: ControlType.String,
  //             defaultValue: "page",
  //             placeholder: "URL Parameter",
  //             title: "Name",
  //             description: "Current page",
  //             hidden: (props) => !props.pagination,
  //         },
  //         search: {
  //             type: ControlType.Boolean,
  //             defaultValue: false,
  //         },
  //         searchName: {
  //             type: ControlType.String,
  //             defaultValue: "search",
  //             placeholder: "URL Parameter",
  //             title: "Name",
  //             description: "Search input text",
  //             // "Search input text\n\n*Note:* URL parameters for filters and sorting can be added on the Filter and Sorting Selector components.",
  //             hidden: (props) => !props.search,
  //         },
  //     },
  // },
  pagination: { type: ControlType2.Boolean, defaultValue: false },
  paginationType: { type: ControlType2.Enum, defaultValue: "pagination", options: ["prevNextButtons", "loadMoreButton"], optionTitles: ["Prev/Next Buttons", "Load More Button"], title: "Type", displaySegmentedControl: true, segmentedControlDirection: "vertical", hidden: (props) => !props.pagination },
  itemsPerPage: { type: ControlType2.Number, defaultValue: 4, min: 1, step: 1, displayStepper: true, hidden: (props) => !props.pagination },
  filtering: { type: ControlType2.Boolean, defaultValue: false },
  favouriting: { type: ControlType2.Boolean, defaultValue: false },
  favouritesOnly: { type: ControlType2.Boolean, defaultValue: false, hidden: (props) => !props.favouriting },
  search: { type: ControlType2.Boolean, defaultValue: false },
  searchFields: { type: ControlType2.Array, defaultValue: [{ fieldType: "default", fieldName: "Title" }], title: "Fields", control: { type: ControlType2.Object, controls: { fieldType: { type: ControlType2.Enum, defaultValue: "default", options: ["reference", "default"], optionTitles: ["Yes", "No"], displaySegmentedControl: true, title: "Reference" }, fieldName: { type: ControlType2.String, defaultValue: "Title", placeholder: "CMS Field Name", preventLocalization: true }, referenceFieldName: { type: ControlType2.String, defaultValue: "", placeholder: "CMS Field Name", preventLocalization: true, hidden: (props) => props.fieldType !== "reference" } } }, description: "CMS fields to search", hidden: (props) => !props.search },
  randomize: { type: ControlType2.Boolean, defaultValue: false },
  sorting: { type: ControlType2.Boolean, defaultValue: false, hidden: (props) => props.randomize },
  sortingField: { type: ControlType2.Object, optional: true, hidden: (props) => props.randomize || !props.sorting, controls: sortingControls() },
  slugFieldName: { type: ControlType2.String, defaultValue: "Slug", placeholder: "Slug Field Name", preventLocalization: true, hidden: (props) => !props.favouriting && !props.sorting },
  cmsCollectionName: { type: ControlType2.String, defaultValue: "", preventLocalization: true, hidden: (props) => true }
});
function ComponentVariantSwitch({ child, componentConfig }) {
  var _child_props_children_props, _child_props_children, _child_props, _componentChild_props, _componentChild_props1, _clonedComponent_props;
  const componentChild = child === null || child === void 0 ? void 0 : (_child_props = child.props) === null || _child_props === void 0 ? void 0 : (_child_props_children = _child_props.children) === null || _child_props_children === void 0 ? void 0 : (_child_props_children_props = _child_props_children.props) === null || _child_props_children_props === void 0 ? void 0 : _child_props_children_props.children;
  const componentProps = componentChild === null || componentChild === void 0 ? void 0 : componentChild.props;
  const component = componentProps === null || componentProps === void 0 ? void 0 : componentProps.children;
  const variant = componentConfig.variant;
  if (!component) {
    return child;
  }
  const clonedComponent = cloneComponent(componentChild, variant);
  if (clonedComponent) {
    return clonedComponent;
  }
  if (componentProps && typeof componentProps === "object" && ((_componentChild_props = componentChild.props) === null || _componentChild_props === void 0 ? void 0 : _componentChild_props.hasOwnProperty("href"))) {
    var _componentProps_children_props, _componentProps_children;
    const clonedChild2 = cloneComponent((_componentProps_children = componentProps.children) === null || _componentProps_children === void 0 ? void 0 : (_componentProps_children_props = _componentProps_children.props) === null || _componentProps_children_props === void 0 ? void 0 : _componentProps_children_props.children, variant);
    if (clonedChild2) {
      var _componentChild_props2, _componentChild_props_children, _componentChild_props3;
      return /* @__PURE__ */ cloneElement2(componentChild, { children: { ...(_componentChild_props2 = componentChild.props) === null || _componentChild_props2 === void 0 ? void 0 : _componentChild_props2.children, props: { ...(_componentChild_props3 = componentChild.props) === null || _componentChild_props3 === void 0 ? void 0 : (_componentChild_props_children = _componentChild_props3.children) === null || _componentChild_props_children === void 0 ? void 0 : _componentChild_props_children.props, children: clonedChild2 } } });
    }
  }
  const clonedChild = cloneComponent(componentChild === null || componentChild === void 0 ? void 0 : (_componentChild_props1 = componentChild.props) === null || _componentChild_props1 === void 0 ? void 0 : _componentChild_props1.children, variant);
  if (clonedChild) {
    return /* @__PURE__ */ cloneElement2(componentChild, { children: clonedChild });
  }
  if (clonedComponent === null || clonedComponent === void 0 ? void 0 : (_clonedComponent_props = clonedComponent.props) === null || _clonedComponent_props === void 0 ? void 0 : _clonedComponent_props.hasOwnProperty("variant")) {
    return /* @__PURE__ */ cloneElement2(component, { variant });
  }
  return child;
}
var MemoizedComponentVariantSwitch = /* @__PURE__ */ memo(ComponentVariantSwitch);
var MemoizedMasonry = /* @__PURE__ */ memo(Masonry);
function cloneComponent(componentChild, variant) {
  var _component_type;
  const componentProps = componentChild === null || componentChild === void 0 ? void 0 : componentChild.props;
  const component = componentProps === null || componentProps === void 0 ? void 0 : componentProps.children;
  if ((componentChild === null || componentChild === void 0 ? void 0 : componentChild.type) == ResolveLinks) {
    return /* @__PURE__ */ _jsx3(ResolveLinks, { ...componentProps, children: (...values) => {
      const element = component(...values);
      return /* @__PURE__ */ cloneElement2(element, { children: { ...element.props.children, props: { ...element.props.children.props, children: { ...element.props.children.props.children, props: { ...element.props.children.props.children.props, variant } } } } });
    } });
  } else if (!(component === null || component === void 0 ? void 0 : (_component_type = component.type) === null || _component_type === void 0 ? void 0 : _component_type.propertyControls)) {
    var _component_props;
    const cData = component === null || component === void 0 ? void 0 : (_component_props = component.props) === null || _component_props === void 0 ? void 0 : _component_props.children;
    if (component && cData) {
      var _cData_type_propertyControls, _cData_type;
      const variantProp = (_cData_type = cData.type) === null || _cData_type === void 0 ? void 0 : (_cData_type_propertyControls = _cData_type.propertyControls) === null || _cData_type_propertyControls === void 0 ? void 0 : _cData_type_propertyControls.variant;
      if (variantProp) {
        return /* @__PURE__ */ cloneElement2(component, { children: { ...cData, props: { ...cData.props, variant } } });
      }
    }
  }
  return null;
}
function shuffle(array, seed) {
  const shuffled = array.slice();
  let currentSeed = seed;
  const random = () => {
    const x = Math.sin(currentSeed++) * 1e4;
    return x - Math.floor(x);
  };
  for (let i2 = shuffled.length - 1; i2 > 0; i2--) {
    const j2 = Math.floor(random() * (i2 + 1));
    [shuffled[i2], shuffled[j2]] = [shuffled[j2], shuffled[i2]];
  }
  return shuffled;
}
function getPropertyControl(fieldName, fieldType, referenceFieldName, referenceFieldType, propertyControlsByTitle, mainAlias, defaultReferencePropertyTitle = "") {
  var _propertyControlsByTitle_mainAlias;
  let property = ((_propertyControlsByTitle_mainAlias = propertyControlsByTitle[mainAlias]) === null || _propertyControlsByTitle_mainAlias === void 0 ? void 0 : _propertyControlsByTitle_mainAlias[fieldName]) || null;
  let mismatchedFieldName = "";
  let mismatchedFieldType = "";
  if (property) {
    if (property.type === "collectionreference") {
      const alias = property.id;
      const propertyControls = propertyControlsByTitle[alias];
      if (propertyControls) {
        const name = fieldType === "reference" ? referenceFieldName : defaultReferencePropertyTitle;
        const control = propertyControls[name];
        if (control) {
          if (referenceFieldType && referenceFieldType !== control.type) {
            mismatchedFieldName = fieldName;
            mismatchedFieldType = control.type;
          } else {
            property = { ...control, id: `${alias}.${control.id}` };
          }
        }
      }
    } else if (property.type !== fieldType) {
      mismatchedFieldName = fieldName;
      mismatchedFieldType = fieldType;
    }
  }
  return { property, mismatchedFieldName, mismatchedFieldType };
}
function processField(field, fieldValue, filterValue, multiSelect, conditionContains, multiReferenceItemsById) {
  if (field.type === "multicollectionreference" && Array.isArray(fieldValue)) {
    const rItems = multiReferenceItemsById[field.referenceAlias];
    for (const item of fieldValue) {
      if (!item) {
        continue;
      }
      const itemValue = item[field.referenceId];
      if (itemValue === null || itemValue === void 0) {
        continue;
      }
      if (filterData(itemValue, filterValue, field.referenceType, multiSelect, conditionContains)) {
        return true;
      }
    }
  } else {
    if (fieldValue === null || fieldValue === void 0) {
      return false;
    }
    return filterData(fieldValue, filterValue, field.type, multiSelect, conditionContains);
  }
  return false;
}
function filterData(fieldValue, filterValue, fieldType, multiSelect, conditionContains) {
  if (typeof filterValue == "string" && multiSelect) {
    const values = filterValue.split(DELIMITER);
    switch (fieldType) {
      case FieldType.String:
      case FieldType.Enum:
        if (conditionContains) {
          for (const v2 of values) {
            if (fieldValue.includes(v2)) {
              return true;
            }
          }
        } else {
          if (values.includes(fieldValue)) {
            return true;
          }
        }
        break;
    }
  } else {
    switch (fieldType) {
      case FieldType.Boolean:
        if (fieldValue == filterValue) {
          return true;
        }
        break;
      case FieldType.String:
      case FieldType.Enum:
        if (conditionContains) {
          if (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.includes(filterValue)) {
            return true;
          }
        } else {
          if (fieldValue == filterValue) {
            return true;
          }
        }
        break;
    }
  }
  return false;
}
function modifySelect(query, filters, search, searchFields, sort, propertyControlsByTitle, collections) {
  const filterIds = Object.keys(filters);
  const hasFilters = filterIds.length;
  if ((query === null || query === void 0 ? void 0 : query.select) && (hasFilters || search || (sort === null || sort === void 0 ? void 0 : sort.sortBy) === "field")) {
    const fields = [];
    if (hasFilters) {
      for (const filterId of filterIds) {
        const filter = filters[filterId];
        if (filter.fieldType === FilterFieldType.MultipleOptions) {
          for (const name of filter.fieldName.split(DELIMITER)) {
            fields.push({ name });
          }
        } else if (filter.fieldType === FilterFieldType.Reference) {
          fields.push({ name: filter.fieldName, referenceFieldName: filter.referenceFieldName });
        } else {
          fields.push({ name: filter.fieldName });
        }
      }
    }
    for (const field of searchFields) {
      if (field.fieldType === "reference") {
        fields.push({ name: field.fieldName, referenceFieldName: field.referenceFieldName });
      } else {
        fields.push({ name: field.fieldName });
      }
    }
    if (sort && sort.sortBy === "field") {
      fields.push({ name: sort.fieldName });
    }
    const uniqueFields = [];
    for (const field of fields) {
      if (!uniqueFields.some((f2) => f2.name === field.name && f2.referenceFieldName === field.referenceFieldName)) {
        uniqueFields.push(field);
      }
    }
    return addFieldsToSelect(uniqueFields, query, propertyControlsByTitle, collections);
  }
  return query === null || query === void 0 ? void 0 : query.select;
}
function mapCollectionDataValues(items, propertyControlsById, multiReferenceItemsById, multiReferenceIdMap) {
  if (!Array.isArray(items) || typeof propertyControlsById !== "object" || typeof multiReferenceItemsById !== "object") {
    return items;
  }
  const copiedItems = items.map((item) => ({ ...item }));
  for (const propertyId of Object.keys(propertyControlsById)) {
    const property = propertyControlsById[propertyId];
    if (property.type === "enum") {
      const optionMap = {};
      if (property.options && property.optionTitles) {
        for (let i2 = 0; i2 < property.options.length; i2++) {
          optionMap[property.options[i2]] = property.optionTitles[i2];
        }
      }
      for (const item of copiedItems) {
        if (item[propertyId]) {
          item[propertyId] = optionMap[item[propertyId]] || "";
        }
      }
    } else if (property.type === "multicollectionreference") {
      const alias = multiReferenceIdMap[propertyId];
      const referenceItemsById = multiReferenceItemsById[alias];
      if (referenceItemsById) {
        for (const item of copiedItems) {
          const referenceItems = item[alias];
          const newItemValues = [];
          if (Array.isArray(referenceItems)) {
            for (const item2 of referenceItems) {
              if (typeof item2 === "string") {
                newItemValues.push(referenceItemsById[item2]);
              } else {
                newItemValues.push(item2);
              }
            }
          }
          item[propertyId] = newItemValues;
        }
      }
    }
  }
  return copiedItems;
}
function getSearchLevelForValue(value, searchText) {
  if (value == void 0 || value == null) {
    return 0;
  }
  const text = String(value).toLowerCase();
  if (text == searchText) {
    return 4;
  } else if (text.includes(searchText)) {
    if (text.startsWith(searchText)) {
      return 3;
    } else if ((" " + text + " ").includes(" " + searchText + " ")) {
      return 2;
    } else {
      return 1;
    }
  }
  return 0;
}

// /:https://framerusercontent.com/modules/SCy7FLdHzkNZj7inEGxN/HrtAuHkfnqvFF419orNe/SearchBar.js
import { jsx as _jsx4, jsxs as _jsxs3 } from "react/jsx-runtime";
import { addPropertyControls as addPropertyControls2, ControlType as ControlType3 } from "unframer";
import { useState as useState2, useRef as useRef4, useEffect as useEffect4 } from "react";
function SearchBar(props) {
  const { superfieldsId: superfieldsId2, placeholderColor, searchIcon, xButton } = props;
  const id = useInstanceId();
  const inputRef = useRef4(null);
  const [focused, setFocused] = useState2(false);
  const [initialized, setInitialized] = useState2(false);
  const [search, totalItems, setSearch] = stdin_default(superfieldsId2, (state) => [state.search, state.totalItems, state.setSearch]);
  useEffect4(() => {
    setInitialized(true);
  }, []);
  function onXClick() {
    setSearch("");
  }
  const paddingValues = parsePadding(props.padding);
  return /* @__PURE__ */ _jsxs3("div", { "data-superfields": true, id, style: { position: "relative", ...createBackground(props.fill), color: props.fontColor, borderRadius: props.radius, boxShadow: props.shadows, display: "flex", flexDirection: "row", alignItems: "center", padding: props.padding, gap: props.gap, cursor: "text", overflow: "hidden", ...props.font, ...props.style }, onClick: () => {
    var _inputRef_current;
    (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();
  }, children: [searchIcon && /* @__PURE__ */ _jsxs3("svg", { xmlns: "http://www.w3.org/2000/svg", width: searchIcon.size, height: searchIcon.size, viewBox: "0 0 24 24", fill: "none", stroke: searchIcon.color, "stroke-width": searchIcon.lineWidth, "stroke-linecap": "round", "stroke-linejoin": "round", style: { opacity: searchIcon.opacity, display: "block", pointerEvents: "none" }, children: [/* @__PURE__ */ _jsx4("path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0" }), /* @__PURE__ */ _jsx4("path", { d: "M21 21l-6 -6" })] }), /* @__PURE__ */ _jsx4("input", { ref: inputRef, type: "text", style: { border: "none", color: props.fontColor, background: "none", ...props.font, ...props.style }, placeholder: props.placeholderText.replace("[items]", String(!initialized || !totalItems ? 0 : totalItems)), autoFocus: props.autoFocus, value: search !== null && search !== void 0 ? search : "", onChange: (event) => {
    setSearch(event.target.value);
  }, onFocus: () => setFocused(true), onBlur: () => setFocused(false) }), search && initialized && xButton && /* @__PURE__ */ _jsxs3("div", { style: { position: "relative", width: xButton.size, display: "flex", alignItems: "center", alignSelf: "stretch" }, children: [/* @__PURE__ */ _jsxs3("svg", { xmlns: "http://www.w3.org/2000/svg", width: xButton.size, height: xButton.size, viewBox: "0 0 24 24", fill: "none", stroke: xButton.color, "stroke-width": xButton.lineWidth, "stroke-linecap": "round", "stroke-linejoin": "round", style: { display: "block", opacity: xButton.opacity }, children: [/* @__PURE__ */ _jsx4("path", { d: "M18 6l-12 12" }), /* @__PURE__ */ _jsx4("path", { d: "M6 6l12 12" })] }), /* @__PURE__ */ _jsx4("button", { style: { position: "absolute", left: -props.gap, top: -paddingValues[0], right: -paddingValues[1], bottom: -paddingValues[2], cursor: "pointer", background: "none", border: "none" }, onClick: onXClick, onFocus: () => setFocused(true), onBlur: () => setFocused(false) })] }), /* @__PURE__ */ _jsx4(Border, { ...props.border }), /* @__PURE__ */ _jsx4(Border, { ...props.focus, animate: { opacity: focused ? 1 : 0 } }), /* @__PURE__ */ _jsx4("style", { dangerouslySetInnerHTML: { __html: `
                        #${id} input::placeholder { color: ${placeholderColor}; user-select: none; }
                        #${id} input::-webkit-input-placeholder { color: ${placeholderColor}; user-select: none; }
                        #${id} input::-moz-placeholder { color: ${placeholderColor}; user-select: none; }
                        #${id} input:-ms-input-placeholder { color: ${placeholderColor}; user-select: none; }
                        #${id} input:-moz-placeholder { color: ${placeholderColor}; user-select: none; }
                        #${id} input:focus { outline: none; }` } })] });
}
SearchBar.displayName = "Search Bar";
addPropertyControls2(SearchBar, { ...superfieldsId(), placeholderText: { type: ControlType3.String, defaultValue: "Search [items] items...", title: "Placeholder", description: "*[items]*: number of CMS items" }, autoFocus: { type: ControlType3.Boolean, defaultValue: false, title: "Auto-Focus" }, fill: fillProp({ color: "#EFEFEF" }), fontColor: { type: ControlType3.Color, defaultValue: "#000" }, placeholderColor: { type: ControlType3.Color, defaultValue: "rgba(0, 0, 0, 0.5)" }, font: { type: ControlType3.Font, controls: "extended", defaultFontType: "sans-serif", defaultValue: { fontSize: 14, lineHeight: 1.4 } }, searchIcon: { type: ControlType3.Object, optional: true, defaultValue: { color: "$000", size: 16, lineWidth: 2.5, opacity: 0.5 }, controls: { color: { type: ControlType3.Color, defaultValue: "$000" }, size: { type: ControlType3.Number, defaultValue: 16, min: 1, step: 1 }, lineWidth: { type: ControlType3.Number, defaultValue: 2.5, min: 0.1, max: 5, step: 0.1 }, opacity: { type: ControlType3.Number, defaultValue: 1, min: 0, max: 1, step: 0.01 } } }, xButton: { type: ControlType3.Object, optional: true, defaultValue: { color: "#000", size: 14, lineWidth: 2.5, opacity: 0.5 }, controls: { color: { type: ControlType3.Color, defaultValue: "#000" }, size: { type: ControlType3.Number, defaultValue: 14, min: 1, step: 1 }, lineWidth: { type: ControlType3.Number, defaultValue: 2.5, min: 0.1, max: 5, step: 0.1 }, opacity: { type: ControlType3.Number, defaultValue: 0.5, min: 0, max: 1, step: 0.01 } } }, gap: { type: ControlType3.Number, defaultValue: 8, min: 0, step: 1 }, padding: { type: ControlType3.Padding, defaultValue: "8px 12px 8px 12px" }, radius: { type: ControlType3.BorderRadius, defaultValue: "8px" }, border: borderPropertyControl(), shadows: { type: ControlType3.BoxShadow }, focus: { type: ControlType3.Object, optional: true, defaultValue: { color: "#0075FF", width: 2, style: "solid" }, buttonTitle: "Border", controls: { color: { type: ControlType3.Color, defaultValue: "#0075FF", title: "Color" }, width: { type: ControlType3.FusedNumber, defaultValue: 2, toggleKey: "widthIsMixed", toggleTitles: ["All", "Individual"], valueKeys: ["widthTop", "widthRight", "widthBottom", "widthLeft"], valueLabels: ["T", "R", "B", "L"], min: 0 }, style: { type: ControlType3.Enum, defaultValue: "solid", options: ["solid", "dashed", "dotted", "double"], optionTitles: ["Solid", "Dashed", "Dotted", "Double"] }, transition: { type: ControlType3.Transition, defaultValue: { type: "spring", duration: 0.2, bounce: 0 } } } } });
function parsePadding(padding) {
  const values = padding.trim().split(/\s+/).map((val) => parseInt(val, 10));
  if (values.length === 1) {
    return [values[0], values[0], values[0], values[0]];
  } else if (values.length === 4) {
    return values;
  } else {
    throw new Error("Invalid padding input. Provide either one or four padding values.");
  }
}

// /:https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS.js
import { addPropertyControls as e4, ControlType as t11, QueryEngine as l2 } from "unframer";

// /:https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS-0.js
import { ControlType as _ } from "unframer";
import { ControlType as tA } from "unframer";
var t2;
var e2;
var r2;
var n2 = Object.create;
var i = Object.defineProperty;
var s3 = Object.getOwnPropertyDescriptor;
var a = Object.getOwnPropertyNames;
var o2 = Object.getPrototypeOf;
var u = Object.prototype.hasOwnProperty;
var l = (t102, e22) => function() {
  return e22 || (0, t102[a(t102)[0]])((e22 = { exports: {} }).exports, e22), e22.exports;
};
var f = (t102, e22, r22, n22) => {
  if (e22 && "object" == typeof e22 || "function" == typeof e22) for (let o22 of a(e22)) u.call(t102, o22) || o22 === r22 || i(t102, o22, { get: () => e22[o22], enumerable: !(n22 = s3(e22, o22)) || n22.enumerable });
  return t102;
};
var h = (t102, e22, r22) => (r22 = null != t102 ? n2(o2(t102)) : {}, f(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  !e22 && t102 && t102.__esModule ? r22 : i(r22, "default", { value: t102, enumerable: true }),
  t102
));
var c2 = l({ "../../../node_modules/dataloader/index.js"(t102, e22) {
  var r22, n22 = /* @__PURE__ */ function() {
    function t112(t12, e42) {
      if ("function" != typeof t12) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but got: " + t12 + ".");
      this._batchLoadFn = t12, this._maxBatchSize = function(t13) {
        if (!(!t13 || false !== t13.batch)) return 1;
        var e5 = t13 && t13.maxBatchSize;
        if (void 0 === e5) return 1 / 0;
        if ("number" != typeof e5 || e5 < 1) throw TypeError("maxBatchSize must be a positive number: " + e5);
        return e5;
      }(e42), this._batchScheduleFn = function(t13) {
        var e5 = t13 && t13.batchScheduleFn;
        if (void 0 === e5) return i2;
        if ("function" != typeof e5) throw TypeError("batchScheduleFn must be a function: " + e5);
        return e5;
      }(e42), this._cacheKeyFn = function(t13) {
        var e5 = t13 && t13.cacheKeyFn;
        if (void 0 === e5) return function(t14) {
          return t14;
        };
        if ("function" != typeof e5) throw TypeError("cacheKeyFn must be a function: " + e5);
        return e5;
      }(e42), this._cacheMap = function(t13) {
        if (!(!t13 || false !== t13.cache)) return null;
        var e5 = t13 && t13.cacheMap;
        if (void 0 === e5) return /* @__PURE__ */ new Map();
        if (null !== e5) {
          var r32 = ["get", "set", "delete", "clear"].filter(function(t14) {
            return e5 && "function" != typeof e5[t14];
          });
          if (0 !== r32.length) throw TypeError("Custom cacheMap missing methods: " + r32.join(", "));
        }
        return e5;
      }(e42), this._batch = null, this.name = e42 && e42.name ? e42.name : null;
    }
    var e32 = t112.prototype;
    return e32.load = function(t12) {
      if (null == t12) throw TypeError("The loader.load() function must be called with a value, but got: " + String(t12) + ".");
      var e42 = function(t13) {
        var e5 = t13._batch;
        if (null !== e5 && !e5.hasDispatched && e5.keys.length < t13._maxBatchSize) return e5;
        var r4 = { hasDispatched: false, keys: [], callbacks: [] };
        return t13._batch = r4, t13._batchScheduleFn(function() {
          (function(t14, e6) {
            var r5;
            if (e6.hasDispatched = true, 0 === e6.keys.length) {
              a22(e6);
              return;
            }
            try {
              r5 = t14._batchLoadFn(e6.keys);
            } catch (r6) {
              return s22(t14, e6, TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function errored synchronously: " + String(r6) + "."));
            }
            if (!r5 || "function" != typeof r5.then) return s22(t14, e6, TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise: " + String(r5) + "."));
            r5.then(function(t15) {
              if (!o22(t15)) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array: " + String(t15) + ".");
              if (t15.length !== e6.keys.length) throw TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys.\n\nKeys:\n" + String(e6.keys) + "\n\nValues:\n" + String(t15));
              a22(e6);
              for (var r6 = 0; r6 < e6.callbacks.length; r6++) {
                var n4 = t15[r6];
                n4 instanceof Error ? e6.callbacks[r6].reject(n4) : e6.callbacks[r6].resolve(n4);
              }
            }).catch(function(r6) {
              s22(t14, e6, r6);
            });
          })(t13, r4);
        }), r4;
      }(this), r32 = this._cacheMap, n32 = this._cacheKeyFn(t12);
      if (r32) {
        var i3 = r32.get(n32);
        if (i3) {
          var u2 = e42.cacheHits || (e42.cacheHits = []);
          return new Promise(function(t13) {
            u2.push(function() {
              t13(i3);
            });
          });
        }
      }
      e42.keys.push(t12);
      var l22 = new Promise(function(t13, r4) {
        e42.callbacks.push({ resolve: t13, reject: r4 });
      });
      return r32 && r32.set(n32, l22), l22;
    }, e32.loadMany = function(t12) {
      if (!o22(t12)) throw TypeError("The loader.loadMany() function must be called with Array<key> but got: " + t12 + ".");
      for (var e42 = [], r32 = 0; r32 < t12.length; r32++) e42.push(this.load(t12[r32]).catch(function(t13) {
        return t13;
      }));
      return Promise.all(e42);
    }, e32.clear = function(t12) {
      var e42 = this._cacheMap;
      if (e42) {
        var r32 = this._cacheKeyFn(t12);
        e42.delete(r32);
      }
      return this;
    }, e32.clearAll = function() {
      var t12 = this._cacheMap;
      return t12 && t12.clear(), this;
    }, e32.prime = function(t12, e42) {
      var r32 = this._cacheMap;
      if (r32) {
        var n32, i3 = this._cacheKeyFn(t12);
        void 0 === r32.get(i3) && (e42 instanceof Error ? (n32 = Promise.reject(e42)).catch(function() {
        }) : n32 = Promise.resolve(e42), r32.set(i3, n32));
      }
      return this;
    }, t112;
  }(), i2 = "object" == typeof process && "function" == typeof process.nextTick ? function(t112) {
    r22 || (r22 = Promise.resolve()), r22.then(function() {
      process.nextTick(t112);
    });
  } : "function" == typeof setImmediate ? function(t112) {
    setImmediate(t112);
  } : function(t112) {
    setTimeout(t112);
  };
  function s22(t112, e32, r32) {
    a22(e32);
    for (var n32 = 0; n32 < e32.keys.length; n32++) t112.clear(e32.keys[n32]), e32.callbacks[n32].reject(r32);
  }
  function a22(t112) {
    if (t112.cacheHits) for (var e32 = 0; e32 < t112.cacheHits.length; e32++) t112.cacheHits[e32]();
  }
  function o22(t112) {
    return "object" == typeof t112 && null !== t112 && "number" == typeof t112.length && (0 === t112.length || t112.length > 0 && Object.prototype.hasOwnProperty.call(t112, t112.length - 1));
  }
  e22.exports = n22;
} });
var p = l({ "../../../node_modules/splaytree/dist/splay.js"(t102, e22) {
  var r22;
  r22 = function() {
    var t112 = function(t12, e42) {
      this.next = null, this.key = t12, this.data = e42, this.left = null, this.right = null;
    };
    function e32(t12, e42) {
      return t12 > e42 ? 1 : t12 < e42 ? -1 : 0;
    }
    function r32(e42, r4, n32) {
      for (var i3 = new t112(null, null), s22 = i3, a22 = i3; ; ) {
        var o22 = n32(e42, r4.key);
        if (o22 < 0) {
          if (null === r4.left) break;
          if (0 > n32(e42, r4.left.key)) {
            var u2 = r4.left;
            if (r4.left = u2.right, u2.right = r4, null === (r4 = u2).left) break;
          }
          a22.left = r4, a22 = r4, r4 = r4.left;
        } else if (o22 > 0) {
          if (null === r4.right) break;
          if (n32(e42, r4.right.key) > 0) {
            var u2 = r4.right;
            if (r4.right = u2.left, u2.left = r4, null === (r4 = u2).right) break;
          }
          s22.right = r4, s22 = r4, r4 = r4.right;
        } else break;
      }
      return s22.right = r4.left, a22.left = r4.right, r4.left = i3.right, r4.right = i3.left, r4;
    }
    function n22(e42, n32, i3, s22) {
      var a22 = new t112(e42, n32);
      if (null === i3) return a22.left = a22.right = null, a22;
      i3 = r32(e42, i3, s22);
      var o22 = s22(e42, i3.key);
      return o22 < 0 ? (a22.left = i3.left, a22.right = i3, i3.left = null) : o22 >= 0 && (a22.right = i3.right, a22.left = i3, i3.right = null), a22;
    }
    function i2(t12, e42, n32) {
      var i3 = null, s22 = null;
      if (e42) {
        e42 = r32(t12, e42, n32);
        var a22 = n32(e42.key, t12);
        0 === a22 ? (i3 = e42.left, s22 = e42.right) : a22 < 0 ? (s22 = e42.right, e42.right = null, i3 = e42) : (i3 = e42.left, e42.left = null, s22 = e42);
      }
      return { left: i3, right: s22 };
    }
    return (
      /** @class */
      function() {
        function s22(t12) {
          void 0 === t12 && (t12 = e32), this._root = null, this._size = 0, this._comparator = t12;
        }
        return s22.prototype.insert = function(t12, e42) {
          return this._size++, this._root = n22(t12, e42, this._root, this._comparator);
        }, s22.prototype.add = function(e42, n32) {
          var i3 = new t112(e42, n32);
          null === this._root && (i3.left = i3.right = null, this._size++, this._root = i3);
          var s32 = this._comparator, a22 = r32(e42, this._root, s32), o22 = s32(e42, a22.key);
          return 0 === o22 ? this._root = a22 : (o22 < 0 ? (i3.left = a22.left, i3.right = a22, a22.left = null) : o22 > 0 && (i3.right = a22.right, i3.left = a22, a22.right = null), this._size++, this._root = i3), this._root;
        }, s22.prototype.remove = function(t12) {
          this._root = this._remove(t12, this._root, this._comparator);
        }, s22.prototype._remove = function(t12, e42, n32) {
          var i3;
          return null === e42 ? null : (e42 = r32(t12, e42, n32), 0 === n32(t12, e42.key)) ? (null === e42.left ? i3 = e42.right : (i3 = r32(t12, e42.left, n32)).right = e42.right, this._size--, i3) : e42;
        }, s22.prototype.pop = function() {
          var t12 = this._root;
          if (t12) {
            for (; t12.left; ) t12 = t12.left;
            return this._root = r32(t12.key, this._root, this._comparator), this._root = this._remove(t12.key, this._root, this._comparator), { key: t12.key, data: t12.data };
          }
          return null;
        }, s22.prototype.findStatic = function(t12) {
          for (var e42 = this._root, r4 = this._comparator; e42; ) {
            var n32 = r4(t12, e42.key);
            if (0 === n32) return e42;
            e42 = n32 < 0 ? e42.left : e42.right;
          }
          return null;
        }, s22.prototype.find = function(t12) {
          return this._root && (this._root = r32(t12, this._root, this._comparator), 0 !== this._comparator(t12, this._root.key)) ? null : this._root;
        }, s22.prototype.contains = function(t12) {
          for (var e42 = this._root, r4 = this._comparator; e42; ) {
            var n32 = r4(t12, e42.key);
            if (0 === n32) return true;
            e42 = n32 < 0 ? e42.left : e42.right;
          }
          return false;
        }, s22.prototype.forEach = function(t12, e42) {
          for (var r4 = this._root, n32 = [], i3 = false; !i3; ) null !== r4 ? (n32.push(r4), r4 = r4.left) : 0 !== n32.length ? (r4 = n32.pop(), t12.call(e42, r4), r4 = r4.right) : i3 = true;
          return this;
        }, s22.prototype.range = function(t12, e42, r4, n32) {
          for (var i3 = [], s32 = this._comparator, a22 = this._root; 0 !== i3.length || a22; ) if (a22) i3.push(a22), a22 = a22.left;
          else {
            if (s32((a22 = i3.pop()).key, e42) > 0) break;
            if (s32(a22.key, t12) >= 0 && r4.call(n32, a22)) return this;
            a22 = a22.right;
          }
          return this;
        }, s22.prototype.keys = function() {
          var t12 = [];
          return this.forEach(function(e42) {
            var r4 = e42.key;
            return t12.push(r4);
          }), t12;
        }, s22.prototype.values = function() {
          var t12 = [];
          return this.forEach(function(e42) {
            var r4 = e42.data;
            return t12.push(r4);
          }), t12;
        }, s22.prototype.min = function() {
          return this._root ? this.minNode(this._root).key : null;
        }, s22.prototype.max = function() {
          return this._root ? this.maxNode(this._root).key : null;
        }, s22.prototype.minNode = function(t12) {
          if (void 0 === t12 && (t12 = this._root), t12) for (; t12.left; ) t12 = t12.left;
          return t12;
        }, s22.prototype.maxNode = function(t12) {
          if (void 0 === t12 && (t12 = this._root), t12) for (; t12.right; ) t12 = t12.right;
          return t12;
        }, s22.prototype.at = function(t12) {
          for (var e42 = this._root, r4 = false, n32 = 0, i3 = []; !r4; ) if (e42) i3.push(e42), e42 = e42.left;
          else if (i3.length > 0) {
            if (e42 = i3.pop(), n32 === t12) return e42;
            n32++, e42 = e42.right;
          } else r4 = true;
          return null;
        }, s22.prototype.next = function(t12) {
          var e42 = this._root, r4 = null;
          if (t12.right) {
            for (r4 = t12.right; r4.left; ) r4 = r4.left;
            return r4;
          }
          for (var n32 = this._comparator; e42; ) {
            var i3 = n32(t12.key, e42.key);
            if (0 === i3) break;
            i3 < 0 ? (r4 = e42, e42 = e42.left) : e42 = e42.right;
          }
          return r4;
        }, s22.prototype.prev = function(t12) {
          var e42 = this._root, r4 = null;
          if (null !== t12.left) {
            for (r4 = t12.left; r4.right; ) r4 = r4.right;
            return r4;
          }
          for (var n32 = this._comparator; e42; ) {
            var i3 = n32(t12.key, e42.key);
            if (0 === i3) break;
            i3 < 0 ? e42 = e42.left : (r4 = e42, e42 = e42.right);
          }
          return r4;
        }, s22.prototype.clear = function() {
          return this._root = null, this._size = 0, this;
        }, s22.prototype.toList = function() {
          return function(e42) {
            for (var r4 = e42, n32 = [], i3 = false, s32 = new t112(null, null), a22 = s32; !i3; ) r4 ? (n32.push(r4), r4 = r4.left) : n32.length > 0 ? r4 = (r4 = a22 = a22.next = n32.pop()).right : i3 = true;
            return a22.next = null, s32.next;
          }(this._root);
        }, s22.prototype.load = function(e42, r4, n32) {
          void 0 === r4 && (r4 = []), void 0 === n32 && (n32 = false);
          var i3 = e42.length, s32 = this._comparator;
          if (n32 && function t12(e5, r5, n4, i4, s4) {
            if (!(n4 >= i4)) {
              for (var a3 = e5[n4 + i4 >> 1], o22 = n4 - 1, u2 = i4 + 1; ; ) {
                do
                  o22++;
                while (0 > s4(e5[o22], a3));
                do
                  u2--;
                while (s4(e5[u2], a3) > 0);
                if (o22 >= u2) break;
                var l22 = e5[o22];
                e5[o22] = e5[u2], e5[u2] = l22, l22 = r5[o22], r5[o22] = r5[u2], r5[u2] = l22;
              }
              t12(e5, r5, n4, u2, s4), t12(e5, r5, u2 + 1, i4, s4);
            }
          }(e42, r4, 0, i3 - 1, s32), null === this._root) this._root = function e5(r5, n4, i4, s4) {
            var a3 = s4 - i4;
            if (a3 > 0) {
              var o22 = i4 + Math.floor(a3 / 2), u2 = r5[o22], l22 = n4[o22], f2 = new t112(u2, l22);
              return f2.left = e5(r5, n4, i4, o22), f2.right = e5(r5, n4, o22 + 1, s4), f2;
            }
            return null;
          }(e42, r4, 0, i3), this._size = i3;
          else {
            var a22 = function(e5, r5, n4) {
              for (var i4 = new t112(null, null), s4 = i4, a3 = e5, o22 = r5; null !== a3 && null !== o22; ) 0 > n4(a3.key, o22.key) ? (s4.next = a3, a3 = a3.next) : (s4.next = o22, o22 = o22.next), s4 = s4.next;
              return null !== a3 ? s4.next = a3 : null !== o22 && (s4.next = o22), i4.next;
            }(this.toList(), function(e5, r5) {
              for (var n4 = new t112(null, null), i4 = n4, s4 = 0; s4 < e5.length; s4++) i4 = i4.next = new t112(e5[s4], r5[s4]);
              return i4.next = null, n4.next;
            }(e42, r4), s32);
            i3 = this._size + i3, this._root = function t12(e5, r5, n4) {
              var i4 = n4 - r5;
              if (i4 > 0) {
                var s4 = r5 + Math.floor(i4 / 2), a3 = t12(e5, r5, s4), o22 = e5.head;
                return o22.left = a3, e5.head = e5.head.next, o22.right = t12(e5, s4 + 1, n4), o22;
              }
              return null;
            }({ head: a22 }, 0, i3);
          }
          return this;
        }, s22.prototype.isEmpty = function() {
          return null === this._root;
        }, Object.defineProperty(s22.prototype, "size", { get: function() {
          return this._size;
        }, enumerable: true, configurable: true }), Object.defineProperty(s22.prototype, "root", { get: function() {
          return this._root;
        }, enumerable: true, configurable: true }), s22.prototype.toString = function(t12) {
          void 0 === t12 && (t12 = function(t13) {
            return String(t13.key);
          });
          var e42 = [];
          return function t13(e5, r4, n32, i3, s32) {
            if (e5) {
              i3("" + r4 + (n32 ? "\u2514\u2500\u2500 " : "\u251C\u2500\u2500 ") + s32(e5) + "\n");
              var a22 = r4 + (n32 ? "    " : "\u2502   ");
              e5.left && t13(e5.left, a22, false, i3, s32), e5.right && t13(e5.right, a22, true, i3, s32);
            }
          }(this._root, "", true, function(t13) {
            return e42.push(t13);
          }, t12), e42.join("");
        }, s22.prototype.update = function(t12, e42, s32) {
          var a22, o22, u2 = this._comparator, l22 = i2(t12, this._root, u2), f2 = l22.left, h2 = l22.right;
          0 > u2(t12, e42) ? h2 = n22(e42, s32, h2, u2) : f2 = n22(e42, s32, f2, u2), this._root = (a22 = f2, null === (o22 = h2) ? a22 : (null === a22 || ((o22 = r32(a22.key, o22, u2)).left = a22), o22));
        }, s22.prototype.split = function(t12) {
          return i2(t12, this._root, this._comparator);
        }, s22.prototype[Symbol.iterator] = function() {
          var t12, e42, r4;
          return function(t13, e5) {
            var r5, n32, i3, s32, a22 = { label: 0, sent: function() {
              if (1 & i3[0]) throw i3[1];
              return i3[1];
            }, trys: [], ops: [] };
            return s32 = { next: o22(0), throw: o22(1), return: o22(2) }, "function" == typeof Symbol && (s32[Symbol.iterator] = function() {
              return this;
            }), s32;
            function o22(s4) {
              return function(o32) {
                return function(s5) {
                  if (r5) throw TypeError("Generator is already executing.");
                  for (; a22; ) try {
                    if (r5 = 1, n32 && (i3 = 2 & s5[0] ? n32.return : s5[0] ? n32.throw || ((i3 = n32.return) && i3.call(n32), 0) : n32.next) && !(i3 = i3.call(n32, s5[1])).done) return i3;
                    switch (n32 = 0, i3 && (s5 = [2 & s5[0], i3.value]), s5[0]) {
                      case 0:
                      case 1:
                        i3 = s5;
                        break;
                      case 4:
                        return a22.label++, { value: s5[1], done: false };
                      case 5:
                        a22.label++, n32 = s5[1], s5 = [0];
                        continue;
                      case 7:
                        s5 = a22.ops.pop(), a22.trys.pop();
                        continue;
                      default:
                        if (!(i3 = (i3 = a22.trys).length > 0 && i3[i3.length - 1]) && (6 === s5[0] || 2 === s5[0])) {
                          a22 = 0;
                          continue;
                        }
                        if (3 === s5[0] && (!i3 || s5[1] > i3[0] && s5[1] < i3[3])) {
                          a22.label = s5[1];
                          break;
                        }
                        if (6 === s5[0] && a22.label < i3[1]) {
                          a22.label = i3[1], i3 = s5;
                          break;
                        }
                        if (i3 && a22.label < i3[2]) {
                          a22.label = i3[2], a22.ops.push(s5);
                          break;
                        }
                        i3[2] && a22.ops.pop(), a22.trys.pop();
                        continue;
                    }
                    s5 = e5.call(t13, a22);
                  } catch (t14) {
                    s5 = [6, t14], n32 = 0;
                  } finally {
                    r5 = i3 = 0;
                  }
                  if (5 & s5[0]) throw s5[1];
                  return { value: s5[0] ? s5[1] : void 0, done: true };
                }([s4, o32]);
              };
            }
          }(this, function(n32) {
            switch (n32.label) {
              case 0:
                t12 = this._root, e42 = [], r4 = false, n32.label = 1;
              case 1:
                if (r4) return [3, 6];
                if (!(null !== t12)) return [3, 2];
                return e42.push(t12), t12 = t12.left, [3, 5];
              case 2:
                if (!(0 !== e42.length)) return [3, 4];
                return [4, t12 = e42.pop()];
              case 3:
                return n32.sent(), t12 = t12.right, [3, 5];
              case 4:
                r4 = true, n32.label = 5;
              case 5:
                return [3, 1];
              case 6:
                return [2];
            }
          });
        }, s22;
      }()
    );
  }, "object" == typeof t102 && void 0 !== e22 ? e22.exports = r22() : "function" == typeof define && define.amd ? define(r22) : t102.SplayTree = r22();
} });
var d2 = l({ "../../../node_modules/whatwg-mimetype/lib/utils.js"(t102) {
  t102.removeLeadingAndTrailingHTTPWhitespace = (t112) => t112.replace(/^[ \t\n\r]+/u, "").replace(/[ \t\n\r]+$/u, ""), t102.removeTrailingHTTPWhitespace = (t112) => t112.replace(/[ \t\n\r]+$/u, ""), t102.isHTTPWhitespaceChar = (t112) => " " === t112 || "	" === t112 || "\n" === t112 || "\r" === t112, t102.solelyContainsHTTPTokenCodePoints = (t112) => /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(t112), t102.soleyContainsHTTPQuotedStringTokenCodePoints = (t112) => /^[\t\u0020-\u007E\u0080-\u00FF]*$/u.test(t112), t102.asciiLowercase = (t112) => t112.replace(/[A-Z]/ug, (t12) => t12.toLowerCase()), t102.collectAnHTTPQuotedString = (t112, e22) => {
    let r22 = "";
    for (e22++; ; ) {
      for (; e22 < t112.length && '"' !== t112[e22] && "\\" !== t112[e22]; ) r22 += t112[e22], ++e22;
      if (e22 >= t112.length) break;
      let n22 = t112[e22];
      if (++e22, "\\" === n22) {
        if (e22 >= t112.length) {
          r22 += "\\";
          break;
        }
        r22 += t112[e22], ++e22;
      } else break;
    }
    return [r22, e22];
  };
} });
var g2 = l({ "../../../node_modules/whatwg-mimetype/lib/mime-type-parameters.js"(t102, e22) {
  var { asciiLowercase: r22, solelyContainsHTTPTokenCodePoints: n22, soleyContainsHTTPQuotedStringTokenCodePoints: i2 } = d2();
  e22.exports = class {
    get size() {
      return this._map.size;
    }
    get(t112) {
      return t112 = r22(String(t112)), this._map.get(t112);
    }
    has(t112) {
      return t112 = r22(String(t112)), this._map.has(t112);
    }
    set(t112, e32) {
      if (t112 = r22(String(t112)), e32 = String(e32), !n22(t112)) throw Error(`Invalid MIME type parameter name "${t112}": only HTTP token code points are valid.`);
      if (!i2(e32)) throw Error(`Invalid MIME type parameter value "${e32}": only HTTP quoted-string token code points are valid.`);
      return this._map.set(t112, e32);
    }
    clear() {
      this._map.clear();
    }
    delete(t112) {
      return t112 = r22(String(t112)), this._map.delete(t112);
    }
    forEach(t112, e32) {
      this._map.forEach(t112, e32);
    }
    keys() {
      return this._map.keys();
    }
    values() {
      return this._map.values();
    }
    entries() {
      return this._map.entries();
    }
    [Symbol.iterator]() {
      return this._map[Symbol.iterator]();
    }
    constructor(t112) {
      this._map = t112;
    }
  };
} });
var y = l({ "../../../node_modules/whatwg-mimetype/lib/parser.js"(t102, e22) {
  var { removeLeadingAndTrailingHTTPWhitespace: r22, removeTrailingHTTPWhitespace: n22, isHTTPWhitespaceChar: i2, solelyContainsHTTPTokenCodePoints: s22, soleyContainsHTTPQuotedStringTokenCodePoints: a22, asciiLowercase: o22, collectAnHTTPQuotedString: u2 } = d2();
  e22.exports = (t112) => {
    t112 = r22(t112);
    let e32 = 0, l22 = "";
    for (; e32 < t112.length && "/" !== t112[e32]; ) l22 += t112[e32], ++e32;
    if (0 === l22.length || !s22(l22) || e32 >= t112.length) return null;
    ++e32;
    let f2 = "";
    for (; e32 < t112.length && ";" !== t112[e32]; ) f2 += t112[e32], ++e32;
    if (0 === (f2 = n22(f2)).length || !s22(f2)) return null;
    let h2 = { type: o22(l22), subtype: o22(f2), parameters: /* @__PURE__ */ new Map() };
    for (; e32 < t112.length; ) {
      for (++e32; i2(t112[e32]); ) ++e32;
      let r32 = "";
      for (; e32 < t112.length && ";" !== t112[e32] && "=" !== t112[e32]; ) r32 += t112[e32], ++e32;
      if (r32 = o22(r32), e32 < t112.length) {
        if (";" === t112[e32]) continue;
        ++e32;
      }
      let l3 = null;
      if ('"' === t112[e32]) for ([l3, e32] = u2(t112, e32); e32 < t112.length && ";" !== t112[e32]; ) ++e32;
      else {
        for (l3 = ""; e32 < t112.length && ";" !== t112[e32]; ) l3 += t112[e32], ++e32;
        if ("" === (l3 = n22(l3))) continue;
      }
      r32.length > 0 && s22(r32) && a22(l3) && !h2.parameters.has(r32) && h2.parameters.set(r32, l3);
    }
    return h2;
  };
} });
var m = l({ "../../../node_modules/whatwg-mimetype/lib/serializer.js"(t102, e22) {
  var { solelyContainsHTTPTokenCodePoints: r22 } = d2();
  e22.exports = (t112) => {
    let e32 = `${t112.type}/${t112.subtype}`;
    if (0 === t112.parameters.size) return e32;
    for (let [n22, i2] of t112.parameters) e32 += ";" + n22 + "=", r22(i2) && 0 !== i2.length || (i2 = i2.replace(/(["\\])/ug, "\\$1"), i2 = `"${i2}"`), e32 += i2;
    return e32;
  };
} });
var v = l({ "../../../node_modules/whatwg-mimetype/lib/mime-type.js"(t102, e22) {
  var r22 = g2(), n22 = y(), i2 = m(), { asciiLowercase: s22, solelyContainsHTTPTokenCodePoints: a22 } = d2();
  e22.exports = class {
    static parse(t112) {
      try {
        return new this(t112);
      } catch (t12) {
        return null;
      }
    }
    get essence() {
      return `${this.type}/${this.subtype}`;
    }
    get type() {
      return this._type;
    }
    set type(t112) {
      if (0 === (t112 = s22(String(t112))).length) throw Error("Invalid type: must be a non-empty string");
      if (!a22(t112)) throw Error(`Invalid type ${t112}: must contain only HTTP token code points`);
      this._type = t112;
    }
    get subtype() {
      return this._subtype;
    }
    set subtype(t112) {
      if (0 === (t112 = s22(String(t112))).length) throw Error("Invalid subtype: must be a non-empty string");
      if (!a22(t112)) throw Error(`Invalid subtype ${t112}: must contain only HTTP token code points`);
      this._subtype = t112;
    }
    get parameters() {
      return this._parameters;
    }
    toString() {
      return i2(this);
    }
    isJavaScript({ prohibitParameters: t112 = false } = {}) {
      switch (this._type) {
        case "text":
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "javascript1.0":
            case "javascript1.1":
            case "javascript1.2":
            case "javascript1.3":
            case "javascript1.4":
            case "javascript1.5":
            case "jscript":
            case "livescript":
            case "x-ecmascript":
            case "x-javascript":
              return !t112 || 0 === this._parameters.size;
            default:
              return false;
          }
        case "application":
          switch (this._subtype) {
            case "ecmascript":
            case "javascript":
            case "x-ecmascript":
            case "x-javascript":
              return !t112 || 0 === this._parameters.size;
            default:
              return false;
          }
        default:
          return false;
      }
    }
    isXML() {
      return "xml" === this._subtype && ("text" === this._type || "application" === this._type) || this._subtype.endsWith("+xml");
    }
    isHTML() {
      return "html" === this._subtype && "text" === this._type;
    }
    constructor(t112) {
      t112 = String(t112);
      let e32 = n22(t112);
      if (null === e32) throw Error(`Could not parse MIME type string "${t112}"`);
      this._type = e32.type, this._subtype = e32.subtype, this._parameters = new r22(e32.parameters);
    }
  };
} });
var w = h(c2());
var b = { Uint8: 1, Uint16: 2, Uint32: 4, BigUint64: 8, Int8: 1, Int16: 2, Int32: 4, BigInt64: 8, Float32: 4, Float64: 8 };
var k = class {
  getOffset() {
    return this.offset;
  }
  ensureBufferLength(t102) {
    let e22 = this.buffer.byteLength;
    if (!(this.offset + t102 <= e22)) throw Error("Reading out of bounds");
  }
  readUint8() {
    let t102 = b.Uint8;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint8(this.offset);
    return this.offset += t102, e22;
  }
  readUint16() {
    let t102 = b.Uint16;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint16(this.offset);
    return this.offset += t102, e22;
  }
  readUint32() {
    let t102 = b.Uint32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getUint32(this.offset);
    return this.offset += t102, e22;
  }
  readUint64() {
    let t102 = this.readBigUint64();
    return Number(t102);
  }
  readBigUint64() {
    let t102 = b.BigUint64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getBigUint64(this.offset);
    return this.offset += t102, e22;
  }
  readInt8() {
    let t102 = b.Int8;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt8(this.offset);
    return this.offset += t102, e22;
  }
  readInt16() {
    let t102 = b.Int16;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt16(this.offset);
    return this.offset += t102, e22;
  }
  readInt32() {
    let t102 = b.Int32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getInt32(this.offset);
    return this.offset += t102, e22;
  }
  readInt64() {
    let t102 = this.readBigInt64();
    return Number(t102);
  }
  readBigInt64() {
    let t102 = b.BigInt64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getBigInt64(this.offset);
    return this.offset += t102, e22;
  }
  readFloat32() {
    let t102 = b.Float32;
    this.ensureBufferLength(t102);
    let e22 = this.view.getFloat32(this.offset);
    return this.offset += t102, e22;
  }
  readFloat64() {
    let t102 = b.Float64;
    this.ensureBufferLength(t102);
    let e22 = this.view.getFloat64(this.offset);
    return this.offset += t102, e22;
  }
  readBuffer(t102) {
    let e22 = this.offset, r22 = e22 + t102, n22 = this.buffer.slice(e22, r22);
    return this.offset = r22, n22;
  }
  readString() {
    let t102 = this.readUint32(), e22 = this.readBuffer(t102);
    return this.decoder.decode(e22);
  }
  readJson() {
    let t102 = this.readString();
    return JSON.parse(t102);
  }
  constructor(t102) {
    this.buffer = t102, this.offset = 0, this.view = new DataView(this.buffer), this.decoder = new TextDecoder();
  }
};
function I(t102) {
  return Number.isFinite(t102);
}
function U(t102) {
  return void 0 === t102;
}
function S(t102) {
  return null === t102;
}
function E(t102, ...e22) {
  if (!t102) throw Error("Assertion Error" + (e22.length > 0 ? ": " + e22.join(" ") : ""));
}
function B(t102) {
  throw Error(`Unexpected value: ${t102}`);
}
var T = Uint8Array;
var L = Uint16Array;
var M = Int32Array;
var A = new T([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var C2 = new T([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var j = new T([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var F = function(t102, e22) {
  for (var r22 = new L(31), n22 = 0; n22 < 31; ++n22) r22[n22] = e22 += 1 << t102[n22 - 1];
  for (var i2 = new M(r22[30]), n22 = 1; n22 < 30; ++n22) for (var s22 = r22[n22]; s22 < r22[n22 + 1]; ++s22) i2[s22] = s22 - r22[n22] << 5 | n22;
  return { b: r22, r: i2 };
};
var P = F(A, 2);
var D = P.b;
var N = P.r;
D[28] = 258, N[258] = 28;
var $ = F(C2, 0);
var O = $.b;
var q = $.r;
var R = new L(32768);
for (e2 = 0; e2 < 32768; ++e2) t2 = (61680 & (t2 = (52428 & (t2 = (43690 & e2) >> 1 | (21845 & e2) << 1)) >> 2 | (13107 & t2) << 2)) >> 4 | (3855 & t2) << 4, R[e2] = ((65280 & t2) >> 8 | (255 & t2) << 8) >> 1;
var z = function(t102, e22, r22) {
  for (var n22, i2 = t102.length, s22 = 0, a22 = new L(e22); s22 < i2; ++s22) t102[s22] && ++a22[t102[s22] - 1];
  var o22 = new L(e22);
  for (s22 = 1; s22 < e22; ++s22) o22[s22] = o22[s22 - 1] + a22[s22 - 1] << 1;
  if (r22) {
    n22 = new L(1 << e22);
    var u2 = 15 - e22;
    for (s22 = 0; s22 < i2; ++s22) if (t102[s22]) for (var l22 = s22 << 4 | t102[s22], f2 = e22 - t102[s22], h2 = o22[t102[s22] - 1]++ << f2, c22 = h2 | (1 << f2) - 1; h2 <= c22; ++h2) n22[R[h2] >> u2] = l22;
  } else for (s22 = 0, n22 = new L(i2); s22 < i2; ++s22) t102[s22] && (n22[s22] = R[o22[t102[s22] - 1]++] >> 15 - t102[s22]);
  return n22;
};
var H = new T(288);
for (e2 = 0; e2 < 144; ++e2) H[e2] = 8;
for (e2 = 144; e2 < 256; ++e2) H[e2] = 9;
for (e2 = 256; e2 < 280; ++e2) H[e2] = 7;
for (e2 = 280; e2 < 288; ++e2) H[e2] = 8;
var J = new T(32);
for (e2 = 0; e2 < 32; ++e2) J[e2] = 5;
var W = /* @__PURE__ */ z(H, 9, 0);
var G = /* @__PURE__ */ z(H, 9, 1);
var K = /* @__PURE__ */ z(J, 5, 0);
var V = /* @__PURE__ */ z(J, 5, 1);
var X = function(t102) {
  for (var e22 = t102[0], r22 = 1; r22 < t102.length; ++r22) t102[r22] > e22 && (e22 = t102[r22]);
  return e22;
};
var Q = function(t102, e22, r22) {
  var n22 = e22 / 8 | 0;
  return (t102[n22] | t102[n22 + 1] << 8) >> (7 & e22) & r22;
};
var Z = function(t102, e22) {
  var r22 = e22 / 8 | 0;
  return (t102[r22] | t102[r22 + 1] << 8 | t102[r22 + 2] << 16) >> (7 & e22);
};
var Y = function(t102) {
  return (t102 + 7) / 8 | 0;
};
var tt = function(t102, e22, r22) {
  return (null == e22 || e22 < 0) && (e22 = 0), (null == r22 || r22 > t102.length) && (r22 = t102.length), new T(t102.subarray(e22, r22));
};
var te = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"];
var tr = function(t102, e22, r22) {
  var n22 = Error(e22 || te[t102]);
  if (n22.code = t102, Error.captureStackTrace && Error.captureStackTrace(n22, tr), !r22) throw n22;
  return n22;
};
var tn = function(t102, e22, r22, n22) {
  var i2 = t102.length, s22 = n22 ? n22.length : 0;
  if (!i2 || e22.f && !e22.l) return r22 || new T(0);
  var a22 = !r22, o22 = a22 || 2 != e22.i, u2 = e22.i;
  a22 && (r22 = new T(3 * i2));
  var l22 = function(t112) {
    var e32 = r22.length;
    if (t112 > e32) {
      var n32 = new T(Math.max(2 * e32, t112));
      n32.set(r22), r22 = n32;
    }
  }, f2 = e22.f || 0, h2 = e22.p || 0, c22 = e22.b || 0, p2 = e22.l, d22 = e22.d, g22 = e22.m, y2 = e22.n, m2 = 8 * i2;
  do {
    if (!p2) {
      f2 = Q(t102, h2, 1);
      var v2 = Q(t102, h2 + 1, 3);
      if (h2 += 3, v2) {
        if (1 == v2) p2 = G, d22 = V, g22 = 9, y2 = 5;
        else if (2 == v2) {
          var w2 = Q(t102, h2, 31) + 257, b2 = Q(t102, h2 + 10, 15) + 4, k2 = w2 + Q(t102, h2 + 5, 31) + 1;
          h2 += 14;
          for (var _2 = new T(k2), I2 = new T(19), U2 = 0; U2 < b2; ++U2) I2[j[U2]] = Q(t102, h2 + 3 * U2, 7);
          h2 += 3 * b2;
          for (var S2 = X(I2), x2 = (1 << S2) - 1, E2 = z(I2, S2, 1), U2 = 0; U2 < k2; ) {
            var B2 = E2[Q(t102, h2, x2)];
            h2 += 15 & B2;
            var L2 = B2 >> 4;
            if (L2 < 16) _2[U2++] = L2;
            else {
              var M2 = 0, F2 = 0;
              for (16 == L2 ? (F2 = 3 + Q(t102, h2, 3), h2 += 2, M2 = _2[U2 - 1]) : 17 == L2 ? (F2 = 3 + Q(t102, h2, 7), h2 += 3) : 18 == L2 && (F2 = 11 + Q(t102, h2, 127), h2 += 7); F2--; ) _2[U2++] = M2;
            }
          }
          var P2 = _2.subarray(0, w2), N2 = _2.subarray(w2);
          g22 = X(P2), y2 = X(N2), p2 = z(P2, g22, 1), d22 = z(N2, y2, 1);
        } else tr(1);
      } else {
        var L2 = Y(h2) + 4, $2 = t102[L2 - 4] | t102[L2 - 3] << 8, q2 = L2 + $2;
        if (q2 > i2) {
          u2 && tr(0);
          break;
        }
        o22 && l22(c22 + $2), r22.set(t102.subarray(L2, q2), c22), e22.b = c22 += $2, e22.p = h2 = 8 * q2, e22.f = f2;
        continue;
      }
      if (h2 > m2) {
        u2 && tr(0);
        break;
      }
    }
    o22 && l22(c22 + 131072);
    for (var R2 = (1 << g22) - 1, H2 = (1 << y2) - 1, J2 = h2; ; J2 = h2) {
      var M2 = p2[Z(t102, h2) & R2], W2 = M2 >> 4;
      if ((h2 += 15 & M2) > m2) {
        u2 && tr(0);
        break;
      }
      if (M2 || tr(2), W2 < 256) r22[c22++] = W2;
      else if (256 == W2) {
        J2 = h2, p2 = null;
        break;
      } else {
        var K2 = W2 - 254;
        if (W2 > 264) {
          var U2 = W2 - 257, te2 = A[U2];
          K2 = Q(t102, h2, (1 << te2) - 1) + D[U2], h2 += te2;
        }
        var tn2 = d22[Z(t102, h2) & H2], ti2 = tn2 >> 4;
        tn2 || tr(3), h2 += 15 & tn2;
        var N2 = O[ti2];
        if (ti2 > 3) {
          var te2 = C2[ti2];
          N2 += Z(t102, h2) & (1 << te2) - 1, h2 += te2;
        }
        if (h2 > m2) {
          u2 && tr(0);
          break;
        }
        o22 && l22(c22 + 131072);
        var ts2 = c22 + K2;
        if (c22 < N2) {
          var ta2 = s22 - N2, to2 = Math.min(N2, ts2);
          for (ta2 + c22 < 0 && tr(3); c22 < to2; ++c22) r22[c22] = n22[ta2 + c22];
        }
        for (; c22 < ts2; ++c22) r22[c22] = r22[c22 - N2];
      }
    }
    e22.l = p2, e22.p = J2, e22.b = c22, e22.f = f2, p2 && (f2 = 1, e22.m = g22, e22.d = d22, e22.n = y2);
  } while (!f2);
  return c22 != r22.length && a22 ? tt(r22, 0, c22) : r22.subarray(0, c22);
};
var ti = function(t102, e22, r22) {
  r22 <<= 7 & e22;
  var n22 = e22 / 8 | 0;
  t102[n22] |= r22, t102[n22 + 1] |= r22 >> 8;
};
var ts = function(t102, e22, r22) {
  r22 <<= 7 & e22;
  var n22 = e22 / 8 | 0;
  t102[n22] |= r22, t102[n22 + 1] |= r22 >> 8, t102[n22 + 2] |= r22 >> 16;
};
var ta = function(t102, e22) {
  for (var r22 = [], n22 = 0; n22 < t102.length; ++n22) t102[n22] && r22.push({ s: n22, f: t102[n22] });
  var i2 = r22.length, s22 = r22.slice();
  if (!i2) return { t: tp, l: 0 };
  if (1 == i2) {
    var a22 = new T(r22[0].s + 1);
    return a22[r22[0].s] = 1, { t: a22, l: 1 };
  }
  r22.sort(function(t112, e32) {
    return t112.f - e32.f;
  }), r22.push({ s: -1, f: 25001 });
  var o22 = r22[0], u2 = r22[1], l22 = 0, f2 = 1, h2 = 2;
  for (r22[0] = { s: -1, f: o22.f + u2.f, l: o22, r: u2 }; f2 != i2 - 1; ) o22 = r22[r22[l22].f < r22[h2].f ? l22++ : h2++], u2 = r22[l22 != f2 && r22[l22].f < r22[h2].f ? l22++ : h2++], r22[f2++] = { s: -1, f: o22.f + u2.f, l: o22, r: u2 };
  for (var c22 = s22[0].s, n22 = 1; n22 < i2; ++n22) s22[n22].s > c22 && (c22 = s22[n22].s);
  var p2 = new L(c22 + 1), d22 = to(r22[f2 - 1], p2, 0);
  if (d22 > e22) {
    var n22 = 0, g22 = 0, y2 = d22 - e22, m2 = 1 << y2;
    for (s22.sort(function(t112, e32) {
      return p2[e32.s] - p2[t112.s] || t112.f - e32.f;
    }); n22 < i2; ++n22) {
      var v2 = s22[n22].s;
      if (p2[v2] > e22) g22 += m2 - (1 << d22 - p2[v2]), p2[v2] = e22;
      else break;
    }
    for (g22 >>= y2; g22 > 0; ) {
      var w2 = s22[n22].s;
      p2[w2] < e22 ? g22 -= 1 << e22 - p2[w2]++ - 1 : ++n22;
    }
    for (; n22 >= 0 && g22; --n22) {
      var b2 = s22[n22].s;
      p2[b2] == e22 && (--p2[b2], ++g22);
    }
    d22 = e22;
  }
  return { t: new T(p2), l: d22 };
};
var to = function(t102, e22, r22) {
  return -1 == t102.s ? Math.max(to(t102.l, e22, r22 + 1), to(t102.r, e22, r22 + 1)) : e22[t102.s] = r22;
};
var tu = function(t102) {
  for (var e22 = t102.length; e22 && !t102[--e22]; ) ;
  for (var r22 = new L(++e22), n22 = 0, i2 = t102[0], s22 = 1, a22 = function(t112) {
    r22[n22++] = t112;
  }, o22 = 1; o22 <= e22; ++o22) if (t102[o22] == i2 && o22 != e22) ++s22;
  else {
    if (!i2 && s22 > 2) {
      for (; s22 > 138; s22 -= 138) a22(32754);
      s22 > 2 && (a22(s22 > 10 ? s22 - 11 << 5 | 28690 : s22 - 3 << 5 | 12305), s22 = 0);
    } else if (s22 > 3) {
      for (a22(i2), --s22; s22 > 6; s22 -= 6) a22(8304);
      s22 > 2 && (a22(s22 - 3 << 5 | 8208), s22 = 0);
    }
    for (; s22--; ) a22(i2);
    s22 = 1, i2 = t102[o22];
  }
  return { c: r22.subarray(0, n22), n: e22 };
};
var tl = function(t102, e22) {
  for (var r22 = 0, n22 = 0; n22 < e22.length; ++n22) r22 += t102[n22] * e22[n22];
  return r22;
};
var tf = function(t102, e22, r22) {
  var n22 = r22.length, i2 = Y(e22 + 2);
  t102[i2] = 255 & n22, t102[i2 + 1] = n22 >> 8, t102[i2 + 2] = 255 ^ t102[i2], t102[i2 + 3] = 255 ^ t102[i2 + 1];
  for (var s22 = 0; s22 < n22; ++s22) t102[i2 + s22 + 4] = r22[s22];
  return (i2 + 4 + n22) * 8;
};
var th = function(t102, e22, r22, n22, i2, s22, a22, o22, u2, l22, f2) {
  ti(e22, f2++, r22), ++i2[256];
  for (var h2, c22, p2, d22, g22 = ta(i2, 15), y2 = g22.t, m2 = g22.l, v2 = ta(s22, 15), w2 = v2.t, b2 = v2.l, k2 = tu(y2), _2 = k2.c, I2 = k2.n, U2 = tu(w2), S2 = U2.c, x2 = U2.n, E2 = new L(19), B2 = 0; B2 < _2.length; ++B2) ++E2[31 & _2[B2]];
  for (var B2 = 0; B2 < S2.length; ++B2) ++E2[31 & S2[B2]];
  for (var T2 = ta(E2, 7), M2 = T2.t, F2 = T2.l, P2 = 19; P2 > 4 && !M2[j[P2 - 1]]; --P2) ;
  var D2 = l22 + 5 << 3, N2 = tl(i2, H) + tl(s22, J) + a22, $2 = tl(i2, y2) + tl(s22, w2) + a22 + 14 + 3 * P2 + tl(E2, M2) + 2 * E2[16] + 3 * E2[17] + 7 * E2[18];
  if (u2 >= 0 && D2 <= N2 && D2 <= $2) return tf(e22, f2, t102.subarray(u2, u2 + l22));
  if (ti(e22, f2, 1 + ($2 < N2)), f2 += 2, $2 < N2) {
    h2 = z(y2, m2, 0), c22 = y2, p2 = z(w2, b2, 0), d22 = w2;
    var O2 = z(M2, F2, 0);
    ti(e22, f2, I2 - 257), ti(e22, f2 + 5, x2 - 1), ti(e22, f2 + 10, P2 - 4), f2 += 14;
    for (var B2 = 0; B2 < P2; ++B2) ti(e22, f2 + 3 * B2, M2[j[B2]]);
    f2 += 3 * P2;
    for (var q2 = [_2, S2], R2 = 0; R2 < 2; ++R2) for (var G2 = q2[R2], B2 = 0; B2 < G2.length; ++B2) {
      var V2 = 31 & G2[B2];
      ti(e22, f2, O2[V2]), f2 += M2[V2], V2 > 15 && (ti(e22, f2, G2[B2] >> 5 & 127), f2 += G2[B2] >> 12);
    }
  } else h2 = W, c22 = H, p2 = K, d22 = J;
  for (var B2 = 0; B2 < o22; ++B2) {
    var X2 = n22[B2];
    if (X2 > 255) {
      var V2 = X2 >> 18 & 31;
      ts(e22, f2, h2[V2 + 257]), f2 += c22[V2 + 257], V2 > 7 && (ti(e22, f2, X2 >> 23 & 31), f2 += A[V2]);
      var Q2 = 31 & X2;
      ts(e22, f2, p2[Q2]), f2 += d22[Q2], Q2 > 3 && (ts(e22, f2, X2 >> 5 & 8191), f2 += C2[Q2]);
    } else ts(e22, f2, h2[X2]), f2 += c22[X2];
  }
  return ts(e22, f2, h2[256]), f2 + c22[256];
};
var tc = /* @__PURE__ */ new M([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
var tp = /* @__PURE__ */ new T(0);
var td = function(t102, e22, r22, n22, i2, s22) {
  var a22 = s22.z || t102.length, o22 = new T(n22 + a22 + 5 * (1 + Math.ceil(a22 / 7e3)) + i2), u2 = o22.subarray(n22, o22.length - i2), l22 = s22.l, f2 = 7 & (s22.r || 0);
  if (e22) {
    f2 && (u2[0] = s22.r >> 3);
    for (var h2 = tc[e22 - 1], c22 = h2 >> 13, p2 = 8191 & h2, d22 = (1 << r22) - 1, g22 = s22.p || new L(32768), y2 = s22.h || new L(d22 + 1), m2 = Math.ceil(r22 / 3), v2 = 2 * m2, w2 = function(e32) {
      return (t102[e32] ^ t102[e32 + 1] << m2 ^ t102[e32 + 2] << v2) & d22;
    }, b2 = new M(25e3), k2 = new L(288), _2 = new L(32), I2 = 0, U2 = 0, S2 = s22.i || 0, x2 = 0, E2 = s22.w || 0, B2 = 0; S2 + 2 < a22; ++S2) {
      var j2 = w2(S2), F2 = 32767 & S2, P2 = y2[j2];
      if (g22[F2] = P2, y2[j2] = F2, E2 <= S2) {
        var D2 = a22 - S2;
        if ((I2 > 7e3 || x2 > 24576) && (D2 > 423 || !l22)) {
          f2 = th(t102, u2, 0, b2, k2, _2, U2, x2, B2, S2 - B2, f2), x2 = I2 = U2 = 0, B2 = S2;
          for (var $2 = 0; $2 < 286; ++$2) k2[$2] = 0;
          for (var $2 = 0; $2 < 30; ++$2) _2[$2] = 0;
        }
        var O2 = 2, R2 = 0, z2 = p2, H2 = F2 - P2 & 32767;
        if (D2 > 2 && j2 == w2(S2 - H2)) for (var J2 = Math.min(c22, D2) - 1, W2 = Math.min(32767, S2), G2 = Math.min(258, D2); H2 <= W2 && --z2 && F2 != P2; ) {
          if (t102[S2 + O2] == t102[S2 + O2 - H2]) {
            for (var K2 = 0; K2 < G2 && t102[S2 + K2] == t102[S2 + K2 - H2]; ++K2) ;
            if (K2 > O2) {
              if (O2 = K2, R2 = H2, K2 > J2) break;
              for (var V2 = Math.min(H2, K2 - 2), X2 = 0, $2 = 0; $2 < V2; ++$2) {
                var Q2 = S2 - H2 + $2 & 32767, Z2 = g22[Q2], te2 = Q2 - Z2 & 32767;
                te2 > X2 && (X2 = te2, P2 = Q2);
              }
            }
          }
          P2 = g22[F2 = P2], H2 += F2 - P2 & 32767;
        }
        if (R2) {
          b2[x2++] = 268435456 | N[O2] << 18 | q[R2];
          var tr2 = 31 & N[O2], tn2 = 31 & q[R2];
          U2 += A[tr2] + C2[tn2], ++k2[257 + tr2], ++_2[tn2], E2 = S2 + O2, ++I2;
        } else b2[x2++] = t102[S2], ++k2[t102[S2]];
      }
    }
    for (S2 = Math.max(S2, E2); S2 < a22; ++S2) b2[x2++] = t102[S2], ++k2[t102[S2]];
    f2 = th(t102, u2, l22, b2, k2, _2, U2, x2, B2, S2 - B2, f2), l22 || (s22.r = 7 & f2 | u2[f2 / 8 | 0] << 3, f2 -= 7, s22.h = y2, s22.p = g22, s22.i = S2, s22.w = E2);
  } else {
    for (var S2 = s22.w || 0; S2 < a22 + l22; S2 += 65535) {
      var ti2 = S2 + 65535;
      ti2 >= a22 && (u2[f2 / 8 | 0] = l22, ti2 = a22), f2 = tf(u2, f2 + 1, t102.subarray(S2, ti2));
    }
    s22.i = a22;
  }
  return tt(o22, 0, n22 + Y(f2) + i2);
};
var tg = function(t102, e22, r22, n22, i2) {
  if (!i2 && (i2 = { l: 1 }, e22.dictionary)) {
    var s22 = e22.dictionary.subarray(-32768), a22 = new T(s22.length + t102.length);
    a22.set(s22), a22.set(t102, s22.length), t102 = a22, i2.w = s22.length;
  }
  return td(t102, null == e22.level ? 6 : e22.level, null == e22.mem ? i2.l ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t102.length)))) : 20 : 12 + e22.mem, r22, n22, i2);
};
function ty(t102, e22) {
  return tg(t102, e22 || {}, 0, 0);
}
function tm(t102, e22) {
  return tn(t102, { i: 2 }, e22 && e22.out, e22 && e22.dictionary);
}
var tv = "undefined" != typeof TextDecoder && /* @__PURE__ */ new TextDecoder();
var tw = 0;
try {
  tv.decode(tp, { stream: true }), tw = 1;
} catch (t102) {
}
var tb = h(p());
var tk = 1024;
var t_ = 1.5;
var tI = (t102) => 2 ** t102 - 1;
var tU = (t102) => -(2 ** (t102 - 1));
var tS = (t102) => 2 ** (t102 - 1) - 1;
var tx = { Uint8: 0, Uint16: 0, Uint32: 0, Uint64: 0, BigUint64: 0, Int8: tU(8), Int16: tU(16), Int32: tU(32), Int64: Number.MIN_SAFE_INTEGER, BigInt64: -(BigInt(2) ** BigInt(63)) };
var tE = { Uint8: tI(8), Uint16: tI(16), Uint32: tI(32), Uint64: Number.MAX_SAFE_INTEGER, BigUint64: BigInt(2) ** BigInt(64) - BigInt(1), Int8: tS(8), Int16: tS(16), Int32: tS(32), Int64: Number.MAX_SAFE_INTEGER, BigInt64: BigInt(2) ** BigInt(63) - BigInt(1) };
function tB(t102, e22, r22, n22) {
  E(t102 >= e22, t102, "outside lower bound for", n22), E(t102 <= r22, t102, "outside upper bound for", n22);
}
var tT = class {
  getOffset() {
    return this.offset;
  }
  slice(t102 = 0, e22 = this.offset) {
    return this.buffer.slice(t102, e22);
  }
  subarray(t102 = 0, e22 = this.offset) {
    return new Uint8Array(this.buffer, t102, e22);
  }
  ensureBufferLength(t102) {
    let e22 = this.buffer.byteLength;
    if (this.offset + t102 <= e22) return;
    let r22 = new ArrayBuffer(Math.ceil(e22 * t_) + t102);
    tL(this.buffer, r22, 0), this.buffer = r22, this.view = new DataView(r22);
  }
  writeUint8(t102) {
    tB(t102, tx.Uint8, tE.Uint8, "Uint8");
    let e22 = b.Uint8;
    this.ensureBufferLength(e22), this.view.setUint8(this.offset, t102), this.offset += e22;
  }
  writeUint16(t102) {
    tB(t102, tx.Uint16, tE.Uint16, "Uint16");
    let e22 = b.Uint16;
    this.ensureBufferLength(e22), this.view.setUint16(this.offset, t102), this.offset += e22;
  }
  writeUint32(t102) {
    tB(t102, tx.Uint32, tE.Uint32, "Uint32");
    let e22 = b.Uint32;
    this.ensureBufferLength(e22), this.view.setUint32(this.offset, t102), this.offset += e22;
  }
  writeUint64(t102) {
    tB(t102, tx.Uint64, tE.Uint64, "Uint64");
    let e22 = BigInt(t102);
    this.writeBigUint64(e22);
  }
  writeBigUint64(t102) {
    tB(t102, tx.BigUint64, tE.BigUint64, "BigUint64");
    let e22 = b.BigUint64;
    this.ensureBufferLength(e22), this.view.setBigUint64(this.offset, t102), this.offset += e22;
  }
  writeInt8(t102) {
    tB(t102, tx.Int8, tE.Int8, "Int8");
    let e22 = b.Int8;
    this.ensureBufferLength(e22), this.view.setInt8(this.offset, t102), this.offset += e22;
  }
  writeInt16(t102) {
    tB(t102, tx.Int16, tE.Int16, "Int16");
    let e22 = b.Int16;
    this.ensureBufferLength(e22), this.view.setInt16(this.offset, t102), this.offset += e22;
  }
  writeInt32(t102) {
    tB(t102, tx.Int32, tE.Int32, "Int32");
    let e22 = b.Int32;
    this.ensureBufferLength(e22), this.view.setInt32(this.offset, t102), this.offset += e22;
  }
  writeInt64(t102) {
    tB(t102, tx.Int64, tE.Int64, "Int64");
    let e22 = BigInt(t102);
    this.writeBigInt64(e22);
  }
  writeBigInt64(t102) {
    tB(t102, tx.BigInt64, tE.BigInt64, "BigInt64");
    let e22 = b.BigInt64;
    this.ensureBufferLength(e22), this.view.setBigInt64(this.offset, t102), this.offset += e22;
  }
  writeFloat32(t102) {
    let e22 = b.Float32;
    this.ensureBufferLength(e22), this.view.setFloat32(this.offset, t102), this.offset += e22;
  }
  writeFloat64(t102) {
    let e22 = b.Float64;
    this.ensureBufferLength(e22), this.view.setFloat64(this.offset, t102), this.offset += e22;
  }
  writeBuffer(t102) {
    let e22 = t102.byteLength;
    this.ensureBufferLength(e22), tL(t102, this.buffer, this.offset), this.offset += e22;
  }
  encodeString(t102) {
    let e22 = this.encodedStrings.get(t102);
    if (e22) return e22;
    let r22 = this.encoder.encode(t102);
    return this.encodedStrings.set(t102, r22), r22;
  }
  writeString(t102) {
    let e22 = this.encodeString(t102), r22 = e22.byteLength;
    this.writeUint32(r22), this.writeBuffer(e22);
  }
  writeJson(t102) {
    let e22 = JSON.stringify(t102);
    this.writeString(e22);
  }
  constructor() {
    this.offset = 0, this.buffer = new ArrayBuffer(tk), this.view = new DataView(this.buffer), this.encoder = new TextEncoder(), this.encodedStrings = /* @__PURE__ */ new Map();
  }
};
function tL(t102, e22, r22) {
  let n22 = new Uint8Array(t102), i2 = new Uint8Array(e22);
  i2.set(n22, r22);
}
var tM = class {
  static fromString(t102) {
    let [e22, r22, n22] = t102.split("/").map(Number);
    return E(I(e22), "Invalid chunkId"), E(I(r22), "Invalid offset"), E(I(n22), "Invalid length"), new tM(e22, r22, n22);
  }
  toString() {
    return `${this.chunkId}/${this.offset}/${this.length}`;
  }
  static read(t102) {
    let e22 = t102.readUint16(), r22 = t102.readUint32(), n22 = t102.readUint32();
    return new tM(e22, r22, n22);
  }
  write(t102) {
    t102.writeUint16(this.chunkId), t102.writeUint32(this.offset), t102.writeUint32(this.length);
  }
  compare(t102) {
    return this.chunkId < t102.chunkId ? -1 : this.chunkId > t102.chunkId ? 1 : this.offset < t102.offset ? -1 : this.offset > t102.offset ? 1 : (E(this.length === t102.length), 0);
  }
  constructor(t102, e22, r22) {
    this.chunkId = t102, this.offset = e22, this.length = r22;
  }
};
function tC(t102) {
  if (S(t102)) return 0;
  switch (t102.type) {
    case tA.Array:
      return 1;
    case tA.Boolean:
      return 2;
    case tA.Color:
      return 3;
    case tA.Date:
      return 4;
    case tA.Enum:
      return 5;
    case tA.File:
      return 6;
    case tA.ResponsiveImage:
      return 10;
    case tA.Link:
      return 7;
    case tA.Number:
      return 8;
    case tA.Object:
      return 9;
    case tA.RichText:
      return 11;
    case tA.String:
      return 12;
    default:
      B(t102);
  }
}
((t102) => {
  t102.read = function(t112) {
    let e22 = t112.readUint8();
    switch (e22) {
      case 0:
        return null;
      case 1:
        return tj.read(t112);
      case 2:
        return tF.read(t112);
      case 3:
        return tP.read(t112);
      case 4:
        return tD.read(t112);
      case 5:
        return tN.read(t112);
      case 6:
        return t$.read(t112);
      case 7:
        return tO.read(t112);
      case 8:
        return tq.read(t112);
      case 9:
        return tR.read(t112);
      case 10:
        return tz.read(t112);
      case 11:
        return tH.read(t112);
      case 12:
        return tJ.read(t112);
      default:
        B(e22);
    }
  }, t102.write = function(t112, e22) {
    let r22 = tC(e22);
    if (t112.writeUint8(r22), !S(e22)) switch (e22.type) {
      case tA.Array:
        return tj.write(t112, e22);
      case tA.Boolean:
        return tF.write(t112, e22);
      case tA.Color:
        return tP.write(t112, e22);
      case tA.Date:
        return tD.write(t112, e22);
      case tA.Enum:
        return tN.write(t112, e22);
      case tA.File:
        return t$.write(t112, e22);
      case tA.Link:
        return tO.write(t112, e22);
      case tA.Number:
        return tq.write(t112, e22);
      case tA.Object:
        return tR.write(t112, e22);
      case tA.ResponsiveImage:
        return tz.write(t112, e22);
      case tA.RichText:
        return tH.write(t112, e22);
      case tA.String:
        return tJ.write(t112, e22);
      default:
        B(e22);
    }
  }, t102.compare = function(t112, e22, r22) {
    let n22 = tC(t112), i2 = tC(e22);
    if (n22 < i2) return -1;
    if (n22 > i2) return 1;
    if (S(t112) || S(e22)) return 0;
    switch (t112.type) {
      case tA.Array:
        return E(e22.type === tA.Array), tj.compare(t112, e22, r22);
      case tA.Boolean:
        return E(e22.type === tA.Boolean), tF.compare(t112, e22, r22);
      case tA.Color:
        return E(e22.type === tA.Color), tP.compare(t112, e22, r22);
      case tA.Date:
        return E(e22.type === tA.Date), tD.compare(t112, e22, r22);
      case tA.Enum:
        return E(e22.type === tA.Enum), tN.compare(t112, e22, r22);
      case tA.File:
        return E(e22.type === tA.File), t$.compare(t112, e22, r22);
      case tA.Link:
        return E(e22.type === tA.Link), tO.compare(t112, e22, r22);
      case tA.Number:
        return E(e22.type === tA.Number), tq.compare(t112, e22, r22);
      case tA.Object:
        return E(e22.type === tA.Object), tR.compare(t112, e22, r22);
      case tA.ResponsiveImage:
        return E(e22.type === tA.ResponsiveImage), tz.compare(t112, e22, r22);
      case tA.RichText:
        return E(e22.type === tA.RichText), tH.compare(t112, e22, r22);
      case tA.String:
        return E(e22.type === tA.String), tJ.compare(t112, e22, r22);
      default:
        B(t112);
    }
  };
})(r2 || (r2 = {}));
var tj = { read(t102) {
  let e22 = t102.readUint16(), n22 = [];
  for (let i2 = 0; i2 < e22; i2++) {
    let e32 = r2.read(t102);
    n22.push(e32);
  }
  return { type: tA.Array, value: n22 };
}, write(t102, e22) {
  for (let n22 of (t102.writeUint16(e22.value.length), e22.value)) r2.write(t102, n22);
}, compare(t102, e22, n22) {
  let i2 = t102.value.length, s22 = e22.value.length;
  if (i2 < s22) return -1;
  if (i2 > s22) return 1;
  for (let s32 = 0; s32 < i2; s32++) {
    let i3 = t102.value[s32], a22 = e22.value[s32];
    E(!U(i3), "Left item must exist"), E(!U(a22), "Right item must exist");
    let o22 = r2.compare(i3, a22, n22);
    if (0 !== o22) return o22;
  }
  return 0;
} };
var tF = { read: (t102) => ({ type: tA.Boolean, value: 0 !== t102.readUint8() }), write(t102, e22) {
  t102.writeUint8(e22.value ? 1 : 0);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tP = { read: (t102) => ({ type: tA.Color, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tD = { read(t102) {
  let e22 = t102.readInt64(), r22 = new Date(e22);
  return { type: tA.Date, value: r22.toISOString() };
}, write(t102, e22) {
  let r22 = new Date(e22.value), n22 = r22.getTime();
  t102.writeInt64(n22);
}, compare(t102, e22) {
  let r22 = new Date(t102.value), n22 = new Date(e22.value);
  return r22 < n22 ? -1 : r22 > n22 ? 1 : 0;
} };
var tN = { read: (t102) => ({ type: tA.Enum, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var t$ = { read: (t102) => ({ type: tA.File, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tO = { read: (t102) => ({ type: tA.Link, value: t102.readJson() }), write(t102, e22) {
  t102.writeJson(e22.value);
}, compare(t102, e22) {
  let r22 = JSON.stringify(t102.value), n22 = JSON.stringify(e22.value);
  return r22 < n22 ? -1 : r22 > n22 ? 1 : 0;
} };
var tq = { read: (t102) => ({ type: tA.Number, value: t102.readFloat64() }), write(t102, e22) {
  t102.writeFloat64(e22.value);
}, compare: (t102, e22) => t102.value < e22.value ? -1 : t102.value > e22.value ? 1 : 0 };
var tR = { read(t102) {
  let e22 = t102.readUint16(), n22 = {};
  for (let i2 = 0; i2 < e22; i2++) {
    let e32 = t102.readString();
    n22[e32] = r2.read(t102);
  }
  return { type: tA.Object, value: n22 };
}, write(t102, e22) {
  let n22 = Object.entries(e22.value);
  for (let [e32, i2] of (t102.writeUint16(n22.length), n22)) t102.writeString(e32), r2.write(t102, i2);
}, compare(t102, e22, n22) {
  let i2 = Object.keys(t102.value).sort(), s22 = Object.keys(e22.value).sort();
  if (i2.length < s22.length) return -1;
  if (i2.length > s22.length) return 1;
  for (let a22 = 0; a22 < i2.length; a22++) {
    let o22 = i2[a22], u2 = s22[a22];
    if (E(!U(o22), "Left key must exist"), E(!U(u2), "Left key must exist"), o22 < u2) return -1;
    if (o22 > u2) return 1;
    let l22 = t102.value[o22], f2 = e22.value[u2];
    E(!U(l22), "Left value must exist"), E(!U(f2), "Right value must exist");
    let h2 = r2.compare(l22, f2, n22);
    if (0 !== h2) return h2;
  }
  return 0;
} };
var tz = { read: (t102) => ({ type: tA.ResponsiveImage, value: t102.readJson() }), write(t102, e22) {
  t102.writeJson(e22.value);
}, compare(t102, e22) {
  let r22 = JSON.stringify(t102.value), n22 = JSON.stringify(e22.value);
  return r22 < n22 ? -1 : r22 > n22 ? 1 : 0;
} };
var tH = { read: (t102) => ({ type: tA.RichText, value: t102.readUint32() }), write(t102, e22) {
  t102.writeUint32(e22.value);
}, compare(t102, e22) {
  let r22 = t102.value, n22 = e22.value;
  return r22 < n22 ? -1 : r22 > n22 ? 1 : 0;
} };
var tJ = { read: (t102) => ({ type: tA.String, value: t102.readString() }), write(t102, e22) {
  t102.writeString(e22.value);
}, compare(t102, e22, r22) {
  let n22 = t102.value, i2 = e22.value;
  return (0 === r22.type && (n22 = t102.value.toLowerCase(), i2 = e22.value.toLowerCase()), n22 < i2) ? -1 : n22 > i2 ? 1 : 0;
} };
var tG = 3;
var tK = 250;
var tV = [
  408,
  // Request Timeout
  429,
  // Too Many Requests
  500,
  // Internal Server Error
  502,
  // Bad Gateway
  503,
  // Service Unavailable
  504
];
var tX = async (t102, e22) => {
  let r22 = 0;
  for (; ; ) {
    try {
      let n22 = await fetch(t102, e22);
      if (!tV.includes(n22.status) || ++r22 > tG) return n22;
    } catch (t112) {
      if (e22?.signal?.aborted || ++r22 > tG) throw t112;
    }
    await tQ(r22);
  }
};
async function tQ(t102) {
  let e22 = Math.floor(tK * (Math.random() + 1) * 2 ** (t102 - 1));
  await new Promise((t112) => {
    setTimeout(t112, e22);
  });
}
function tZ(t102) {
  let e22 = 3 & t102.length, r22 = t102.length - e22, n22 = 0, i2 = 0;
  for (; i2 < r22; ) {
    let e32 = 255 & t102.charCodeAt(i2) | (255 & t102.charCodeAt(++i2)) << 8 | (255 & t102.charCodeAt(++i2)) << 16 | (255 & t102.charCodeAt(++i2)) << 24;
    ++i2, n22 ^= e32 = (65535 & (e32 = (e32 = (65535 & e32) * 3432918353 + (((e32 >>> 16) * 3432918353 & 65535) << 16) & 4294967295) << 15 | e32 >>> 17)) * 461845907 + (((e32 >>> 16) * 461845907 & 65535) << 16) & 4294967295, n22 = n22 << 13 | n22 >>> 19;
    let r32 = (65535 & n22) * 5 + (((n22 >>> 16) * 5 & 65535) << 16) & 4294967295;
    n22 = (65535 & r32) + 27492 + (((r32 >>> 16) + 58964 & 65535) << 16);
  }
  let s22 = 0;
  return e22 >= 3 && (s22 ^= (255 & t102.charCodeAt(i2 + 2)) << 16), e22 >= 2 && (s22 ^= (255 & t102.charCodeAt(i2 + 1)) << 8), e22 >= 1 && (s22 ^= 255 & t102.charCodeAt(i2), n22 ^= s22 = (65535 & (s22 = (s22 = (65535 & s22) * 3432918353 + (((s22 >>> 16) * 3432918353 & 65535) << 16) & 4294967295) << 15 | s22 >>> 17)) * 461845907 + (((s22 >>> 16) * 461845907 & 65535) << 16) & 4294967295), n22 ^= t102.length, n22 ^= n22 >>> 16, n22 = (65535 & n22) * 2246822507 + (((n22 >>> 16) * 2246822507 & 65535) << 16) & 4294967295, n22 ^= n22 >>> 13, n22 = (65535 & n22) * 3266489909 + (((n22 >>> 16) * 3266489909 & 65535) << 16) & 4294967295, (n22 ^= n22 >>> 16) >>> 0;
}
var tY = h(v());
var t1 = "\r\n";
var t0 = "--";
async function t22(t102, e22) {
  let r22 = new URL(t102), n22 = en(e22);
  r22.searchParams.set("rangeHash", tZ(n22).toString(16));
  let i2 = await tX(r22, { headers: { Range: n22 } });
  if (!i2.ok) throw Error(`Request failed: ${i2.status} ${i2.statusText}`);
  let s22 = await i2.arrayBuffer(), a22 = new Uint8Array(s22);
  if (200 === i2.status) return e22.map((t112) => {
    if (t112.to > a22.length) throw Error("Missing data");
    return a22.slice(t112.from, t112.to);
  });
  if (206 === i2.status) {
    let t112 = i2.headers.get("Content-Type");
    if (!t112) throw Error("Missing Content-Type header");
    let r32 = new t8(), n32 = new tY.default(t112);
    if ("multipart" === n32.type && "byteranges" === n32.subtype) {
      let t12 = n32.parameters.get("boundary");
      if (!t12) throw Error("Missing boundary parameter");
      let e32 = t5(a22, t12);
      for (let { headers: t13, body: n4 } of e32) {
        let e42 = t13.get("Content-Range");
        if (!e42) throw Error("Missing Content-Range header");
        let i3 = t4(e42);
        if ("bytes" !== i3.unit) throw Error("Unsupported unit");
        r32.write(i3.start, n4);
      }
    } else {
      let t12 = i2.headers.get("Content-Range");
      if (!t12) throw Error("Missing Content-Range header");
      let e32 = t4(t12);
      if ("bytes" !== e32.unit) throw Error("Unsupported unit");
      r32.write(e32.start, a22);
    }
    return e22.map((t12) => r32.read(t12.from, t12.to - t12.from));
  }
  throw Error(`Unsupported response: ${i2.status} ${i2.statusText}`);
}
var t6 = new TextEncoder();
var t3 = new TextDecoder();
function t5(t102, e22) {
  let r22 = t6.encode(t0 + e22), n22 = t9(t102, r22);
  if (U(n22)) throw Error("Missing parts start");
  let i2 = n22 + r22.length, s22 = t6.encode(t1 + t0 + e22 + t0), a22 = et(t102, s22);
  if (U(a22)) throw Error("Missing parts end");
  let o22 = t6.encode(t1 + t0 + e22), u2 = t102.subarray(i2, a22), l22 = t7(u2, o22);
  return l22.map((t112) => {
    let e32 = t6.encode(t1 + t1), r32 = t9(t112, e32);
    if (U(r32)) throw Error("Missing headers end");
    let n32 = t6.encode(t1), i3 = t112.subarray(0, r32), s32 = t7(i3, n32), a3 = new Headers();
    for (let t12 of s32) {
      let e42 = t3.decode(t12), [r4, n4] = e42.split(": ", 2);
      r4 && n4 && a3.append(r4, n4);
    }
    let o32 = r32 + e32.length, u3 = t112.slice(o32);
    return { headers: a3, body: u3 };
  });
}
function t4(t102) {
  let e22 = RegExp("^(?<unit>\\w+) (?<start>\\d+)-(?<end>\\d+)\\/(?<size>\\d+|\\*)$", "u").exec(t102);
  if (!e22 || !e22.groups) throw Error("Invalid Content-Range header");
  let { unit: r22, start: n22, end: i2, size: s22 } = e22.groups;
  return { unit: r22, start: Number(n22), end: Number(i2), size: "*" !== s22 ? Number(s22) : null };
}
var t8 = class {
  read(t102, e22) {
    for (let r22 of this.chunks) {
      if (t102 < r22.start) break;
      if (t102 > r22.end) continue;
      if (t102 + e22 > r22.end) break;
      let n22 = t102 - r22.start, i2 = n22 + e22;
      return r22.data.slice(n22, i2);
    }
    throw Error("Missing data");
  }
  write(t102, e22) {
    let r22 = t102, n22 = r22 + e22.length, i2 = 0, s22 = this.chunks.length;
    for (; i2 < s22; i2++) {
      let t112 = this.chunks[i2];
      if (E(t112, "Missing chunk"), !(r22 > t112.end)) {
        if (r22 > t112.start) {
          let n32 = r22 - t112.start, i3 = t112.data.subarray(0, n32);
          e22 = er(i3, e22), r22 = t112.start;
        }
        break;
      }
    }
    for (; s22 > i2; s22--) {
      let t112 = this.chunks[s22 - 1];
      if (E(t112, "Missing chunk"), !(n22 < t112.start)) {
        if (n22 < t112.end) {
          let r32 = n22 - t112.start, i3 = t112.data.subarray(r32);
          e22 = er(e22, i3), n22 = t112.end;
        }
        break;
      }
    }
    let a22 = { start: r22, end: n22, data: e22 }, o22 = s22 - i2;
    this.chunks.splice(i2, o22, a22);
  }
  constructor() {
    this.chunks = [];
  }
};
function t7(t102, e22) {
  let r22 = [];
  for (; t102.length > 0; ) {
    let n22 = t9(t102, e22) ?? t102.length, i2 = t102.subarray(0, n22);
    r22.push(i2), t102 = t102.subarray(n22 + e22.length);
  }
  return r22;
}
function t9(t102, e22) {
  for (let r22 = 0; r22 < t102.length - e22.length; r22++) {
    let n22 = t102.subarray(r22);
    if (ee(n22, e22)) return r22;
  }
}
function et(t102, e22) {
  for (let r22 = t102.length - e22.length; r22 >= 0; r22--) {
    let n22 = t102.subarray(r22);
    if (ee(n22, e22)) return r22;
  }
}
function ee(t102, e22) {
  for (let r22 = 0; r22 < e22.length; r22++) if (t102[r22] !== e22[r22]) return false;
  return true;
}
function er(t102, e22) {
  let r22 = t102.length + e22.length, n22 = new Uint8Array(r22);
  return n22.set(t102, 0), n22.set(e22, t102.length), n22;
}
function en(t102) {
  E(t102.length > 0, "Must have at least one range");
  let e22 = [...t102].sort((t112, e32) => t112.from - e32.from), r22 = [];
  for (let t112 of e22) {
    let e32 = r22.length - 1, n32 = r22[e32];
    n32 && t112.from <= n32.to ? r22[e32] = { from: n32.from, to: Math.max(n32.to, t112.to) } : r22.push(t112);
  }
  let n22 = r22.map((t112) => `${t112.from}-${t112.to - 1}`);
  return `bytes=${n22.join(",")}`;
}
async function ei(t102, e22, r22) {
  if (!r22) return t22(t102, e22);
  let n22 = eo(e22), i2 = [], s22 = 0;
  for (let t112 of n22) i2.push(`${t112.from}-${t112.to - 1}`), s22 += t112.to - t112.from;
  let a22 = new URL(t102), o22 = i2.join(",");
  a22.searchParams.set("range", o22);
  let u2 = await tX(a22);
  if (200 !== u2.status) throw Error(`Request failed: ${u2.status} ${u2.statusText}`);
  let l22 = await u2.arrayBuffer(), f2 = new Uint8Array(l22);
  if (f2.length !== s22) throw Error("Request failed: Unexpected response length");
  let h2 = new es(), c22 = 0;
  for (let t112 of n22) {
    let e32 = t112.to - t112.from, r32 = c22 + e32, n32 = f2.subarray(c22, r32);
    h2.write(t112.from, n32), c22 = r32;
  }
  return e22.map((t112) => h2.read(t112.from, t112.to - t112.from));
}
var es = class {
  read(t102, e22) {
    for (let r22 of this.chunks) {
      if (t102 < r22.start) break;
      if (t102 > r22.end) continue;
      if (t102 + e22 > r22.end) break;
      let n22 = t102 - r22.start, i2 = n22 + e22;
      return r22.data.slice(n22, i2);
    }
    throw Error("Missing data");
  }
  write(t102, e22) {
    let r22 = t102, n22 = r22 + e22.length, i2 = 0, s22 = this.chunks.length;
    for (; i2 < s22; i2++) {
      let t112 = this.chunks[i2];
      if (E(t112, "Missing chunk"), !(r22 > t112.end)) {
        if (r22 > t112.start) {
          let n32 = r22 - t112.start, i3 = t112.data.subarray(0, n32);
          e22 = ea(i3, e22), r22 = t112.start;
        }
        break;
      }
    }
    for (; s22 > i2; s22--) {
      let t112 = this.chunks[s22 - 1];
      if (E(t112, "Missing chunk"), !(n22 < t112.start)) {
        if (n22 < t112.end) {
          let r32 = n22 - t112.start, i3 = t112.data.subarray(r32);
          e22 = ea(e22, i3), n22 = t112.end;
        }
        break;
      }
    }
    let a22 = { start: r22, end: n22, data: e22 }, o22 = s22 - i2;
    this.chunks.splice(i2, o22, a22);
  }
  constructor() {
    this.chunks = [];
  }
};
function ea(t102, e22) {
  let r22 = t102.length + e22.length, n22 = new Uint8Array(r22);
  return n22.set(t102, 0), n22.set(e22, t102.length), n22;
}
function eo(t102) {
  E(t102.length > 0, "Must have at least one range");
  let e22 = [...t102].sort((t112, e32) => t112.from - e32.from), r22 = [];
  for (let t112 of e22) {
    let e32 = r22.length - 1, n22 = r22[e32];
    n22 && t112.from <= n22.to ? r22[e32] = { from: n22.from, to: Math.max(n22.to, t112.to) } : r22.push(t112);
  }
  return r22;
}
var el = class {
  static read(t102, e22) {
    let n22 = new el();
    if (e22) {
      let r22 = t102.readUint32(), n32 = t102.readBuffer(r22), i3 = tm(new Uint8Array(n32), { dictionary: e22 });
      t102 = new k(i3.buffer);
    }
    let i2 = t102.readUint16();
    for (let e32 = 0; e32 < i2; e32++) {
      let e42 = t102.readString(), i3 = r2.read(t102);
      n22.setField(e42, i3);
    }
    return n22;
  }
  writeUncompressed(t102) {
    for (let [e22, n22] of (t102.writeUint16(this.fields.size), this.fields)) t102.writeString(e22), r2.write(t102, n22);
  }
  write(t102, e22) {
    if (e22) {
      let r22 = new tT();
      this.writeUncompressed(r22);
      let n22 = ty(r22.subarray(), { dictionary: e22 });
      t102.writeUint32(n22.byteLength), t102.writeBuffer(n22);
    } else this.writeUncompressed(t102);
  }
  getData() {
    let t102 = {};
    for (let [e22, r22] of this.fields) t102[e22] = r22;
    return t102;
  }
  setField(t102, e22) {
    this.fields.set(t102, e22);
  }
  getField(t102) {
    return this.fields.get(t102);
  }
  constructor() {
    this.fields = /* @__PURE__ */ new Map();
  }
};
var ef = class {
  scanItems() {
    return this.itemsPromise ??= Promise.all([tX(this.url), this.getCompressionDictionary()]).then(async ([t102, e22]) => {
      if (!t102.ok) throw Error(`Request failed: ${t102.status} ${t102.statusText}`);
      let r22 = await t102.arrayBuffer(), n22 = new k(r22), i2 = [], s22 = n22.readUint32();
      for (let t112 = 0; t112 < s22; t112++) {
        let t12 = n22.getOffset(), r32 = el.read(n22, e22), s32 = n22.getOffset() - t12, a22 = new tM(this.id, t12, s32), o22 = a22.toString(), u2 = { pointer: o22, data: r32.getData() };
        this.itemLoader.prime(o22, u2), i2.push(u2);
      }
      return i2;
    }), this.itemsPromise;
  }
  resolveItem(t102) {
    return this.itemLoader.load(t102);
  }
  getCompressionDictionary() {
    if (!this.compressionDictionaryUrl) return null;
    let t102 = this.compressionDictionaryCache.get(this.compressionDictionaryUrl);
    if (t102) return t102;
    let e22 = tX(this.compressionDictionaryUrl).then(async (t112) => {
      if (!t112.ok) throw Error(`Compression dictionary request failed: ${t112.status} ${t112.statusText}`);
      let e32 = await t112.arrayBuffer();
      return new Uint8Array(e32);
    });
    return this.compressionDictionaryCache.set(this.compressionDictionaryUrl, e22), e22;
  }
  constructor(t102, e22, r22, n22) {
    this.id = t102, this.url = e22, this.compressionDictionaryUrl = r22, this.compressionDictionaryCache = n22, this.itemLoader = new w.default(async (t112) => {
      let e32 = t112.map((t12) => {
        let e42 = tM.fromString(t12);
        return { from: e42.offset, to: e42.offset + e42.length };
      }), [r32, n32] = await Promise.all([ei(this.url, e32, !this.compressionDictionaryUrl), this.getCompressionDictionary()]);
      return r32.map((e42, r4) => {
        let i2 = new k(e42.buffer), s22 = el.read(i2, n32), a22 = t112[r4];
        return E(a22, "Missing pointer"), { pointer: a22, data: s22.getData() };
      });
    });
  }
};
var eh = class {
  async scanItems() {
    let t102 = await Promise.all(this.chunks.map(async (t112) => t112.scanItems()));
    return t102.flat();
  }
  async resolveItems(t102) {
    return Promise.all(t102.map((t112) => {
      let e22 = tM.fromString(t112), r22 = this.chunks[e22.chunkId];
      return E(r22, "Missing chunk"), r22.resolveItem(t112);
    }));
  }
  compareItems(t102, e22) {
    let r22 = tM.fromString(t102.pointer), n22 = tM.fromString(e22.pointer);
    return r22.compare(n22);
  }
  compareValues(t102, e22, n22) {
    return r2.compare(t102, e22, n22);
  }
  constructor(t102) {
    this.options = t102, this.schema = this.options.schema, this.indexes = this.options.indexes, this.resolveRichText = this.options.resolveRichText;
    let e22 = /* @__PURE__ */ new Map();
    this.chunks = this.options.chunks.map((t112, r22) => new ef(r22, t112, this.options.compressionDictionary, e22));
  }
};

// /:https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS-1.js
var t10 = (t23, e22) => async () => {
  let r22 = await t23();
  return r22[e22];
};
var e3 = () => import("./AHisrd_oS-2-B5UHUGVQ.js");
var r3 = [t10(e3, "richText"), t10(e3, "richText1"), t10(e3, "richText2"), t10(e3, "richText3"), t10(e3, "richText4"), t10(e3, "richText5")];
async function resolveRichText(t23) {
  let e22 = r3[t23];
  if (e22) return await e22();
}

// /:https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS.js
var a2 = { id: { isNullable: false, type: t11.String }, kPmEwBKSL: { isNullable: true, type: t11.String }, nextItemId: { isNullable: true, type: t11.String }, niP5RIolc: { isNullable: true, type: t11.String }, previousItemId: { isNullable: true, type: t11.String }, qyVSam3__: { isNullable: true, type: t11.RichText }, ZWPEMW7bG: { isNullable: true, type: t11.Boolean } };
var o3 = new l2();
var n3 = { collectionByLocaleId: { default: new eh({ chunks: [new URL("./AHisrd_oS-chunk-default-0.framercms", "https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS.js").href], compressionDictionary: new URL("./AHisrd_oS-chunk-default-dict.framercms", "https://framerusercontent.com/modules/ikHgrlCNYKXZDqEidRGA/7WYBf3YeXKBCpAKTOu8G/AHisrd_oS.js").href, indexes: [], resolveRichText, schema: a2 }) }, displayName: "Lorem" };
var stdin_default3 = n3;
e4(n3, { kPmEwBKSL: { defaultValue: "", title: "Title", type: t11.String }, niP5RIolc: { title: "Slug", type: t11.String }, ZWPEMW7bG: { defaultValue: true, title: "Favorite", type: t11.Boolean }, qyVSam3__: { defaultValue: "", title: "Content", type: t11.RichText }, previousItemId: { dataIdentifier: "local-module:collection/AHisrd_oS:default", title: "Previous", type: t11.CollectionReference }, nextItemId: { dataIdentifier: "local-module:collection/AHisrd_oS:default", title: "Next", type: t11.CollectionReference } });

// /:https://framerusercontent.com/modules/QlDlEt7jDwW2wkSd7uxL/HmvO3JSmiLry8D2NeTX9/FyeEQTDpS.js
import { fontStore } from "unframer";
fontStore.loadFonts(["Inter", "Inter-Bold", "Inter-BoldItalic", "Inter-Italic"]);
var fonts = [{ explicitInter: true, fonts: [{ family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F", url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116", url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+1F00-1FFF", url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0370-03FF", url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF", url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD", url: "https://framerusercontent.com/assets/vQyevYAyHtARFwPqUzQGpnDs.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB", url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F", url: "https://framerusercontent.com/assets/DpPBYI0sL4fYLgAkX8KXOPVt7c.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116", url: "https://framerusercontent.com/assets/4RAEQdEOrcnDkhHiiCbJOw92Lk.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+1F00-1FFF", url: "https://framerusercontent.com/assets/1K3W8DizY3v4emK8Mb08YHxTbs.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0370-03FF", url: "https://framerusercontent.com/assets/tUSCtfYVM1I1IchuyCwz9gDdQ.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF", url: "https://framerusercontent.com/assets/VgYFWiwsAC5OYxAycRXXvhze58.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD", url: "https://framerusercontent.com/assets/DXD0Q7LSl7HEvDzucnyLnGBHM.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "normal", unicodeRange: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB", url: "https://framerusercontent.com/assets/GIryZETIX4IFypco5pYZONKhJIo.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F", url: "https://framerusercontent.com/assets/H89BbHkbHDzlxZzxi8uPzTsp90.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116", url: "https://framerusercontent.com/assets/u6gJwDuwB143kpNK1T1MDKDWkMc.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+1F00-1FFF", url: "https://framerusercontent.com/assets/43sJ6MfOPh1LCJt46OvyDuSbA6o.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0370-03FF", url: "https://framerusercontent.com/assets/wccHG0r4gBDAIRhfHiOlq6oEkqw.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF", url: "https://framerusercontent.com/assets/WZ367JPwf9bRW6LdTHN8rXgSjw.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD", url: "https://framerusercontent.com/assets/QxmhnWTzLtyjIiZcfaLIJ8EFBXU.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB", url: "https://framerusercontent.com/assets/2A4Xx7CngadFGlVV4xrO06OBHY.woff2", weight: "700" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F", url: "https://framerusercontent.com/assets/CfMzU8w2e7tHgF4T4rATMPuWosA.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116", url: "https://framerusercontent.com/assets/867QObYax8ANsfX4TGEVU9YiCM.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+1F00-1FFF", url: "https://framerusercontent.com/assets/Oyn2ZbENFdnW7mt2Lzjk1h9Zb9k.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0370-03FF", url: "https://framerusercontent.com/assets/cdAe8hgZ1cMyLu9g005pAW3xMo.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF", url: "https://framerusercontent.com/assets/DOfvtmE1UplCq161m6Hj8CSQYg.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD", url: "https://framerusercontent.com/assets/vFzuJY0c65av44uhEKB6vyjFMg.woff2", weight: "400" }, { family: "Inter", source: "framer", style: "italic", unicodeRange: "U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB", url: "https://framerusercontent.com/assets/tKtBcDnBMevsEEJKdNGhhkLzYo.woff2", weight: "400" }] }];
var css = [`.framer-ky3cc .framer-styles-preset-toco2w:not(.rich-text-wrapper), .framer-ky3cc .framer-styles-preset-toco2w.rich-text-wrapper p { --framer-font-family: "Inter", sans-serif; --framer-font-family-bold: "Inter", "Inter Placeholder", sans-serif; --framer-font-family-bold-italic: "Inter", "Inter Placeholder", sans-serif; --framer-font-family-italic: "Inter", "Inter Placeholder", sans-serif; --framer-font-open-type-features: 'blwf' on, 'cv09' on, 'cv03' on, 'cv04' on, 'cv11' on; --framer-font-size: 16px; --framer-font-style: normal; --framer-font-style-bold: normal; --framer-font-style-bold-italic: italic; --framer-font-style-italic: italic; --framer-font-variation-axes: normal; --framer-font-weight: 400; --framer-font-weight-bold: 700; --framer-font-weight-bold-italic: 700; --framer-font-weight-italic: 400; --framer-letter-spacing: -0.02em; --framer-line-height: 1.6em; --framer-paragraph-spacing: 20px; --framer-text-alignment: start; --framer-text-color: #666666; --framer-text-decoration: none; --framer-text-stroke-color: initial; --framer-text-stroke-width: initial; --framer-text-transform: none; }`];
var className = "framer-ky3cc";

export {
  FAVOURITES_FILTER_ID,
  DELIMITER,
  FilterFieldType,
  FilterTextCondition,
  superfieldsId,
  borderPropertyControl,
  Border,
  createBackground,
  fillProp,
  fillPropOnOff,
  getCollectionData,
  getSelectItemForField,
  stdin_default,
  Superfields,
  SearchBar,
  stdin_default3 as stdin_default2,
  fonts,
  css,
  className
};
/*! Bundled license information:

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.5 | MIT *)
*/
/*! Bundled license information:

splaytree/dist/splay.js:
  (**
   * splaytree v3.1.2
   * Fast Splay tree for Node and browser
   *
   * @author Alexander Milevski <info@w8r.name>
   * @license MIT
   * @preserve
   *)
  (*! *****************************************************************************
      Copyright (c) Microsoft Corporation. All rights reserved.
      Licensed under the Apache License, Version 2.0 (the "License"); you may not use
      this file except in compliance with the License. You may obtain a copy of the
      License at http://www.apache.org/licenses/LICENSE-2.0
  
      THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
      WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
      MERCHANTABLITY OR NON-INFRINGEMENT.
  
      See the Apache Version 2.0 License for specific language governing permissions
      and limitations under the License.
      ***************************************************************************** *)
*/
